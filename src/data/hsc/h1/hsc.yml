ScriptTypes:
  columns:
    - key: type
      href: true
      name:
        en: Type
        es: Tipo
      format: code
    - key: info
      name:
        en: Comments
        es: Comentarios
      format: text
    - key: ex
      name:
        en: Example
        es: Ejemplo
      format: codeblock-hsc
  slugKey: type
  rows:
    - type: continuous
      info:
        en: Runs every tick (simulation frame of the engine), at 30 ticks per second.
        es:
      ex: >-
        (script continuous kill_players_in_zone
          (if (volume_test_object kill_volume (list_get (players) 0))
            (unit_kill (unit (list_get (players) 0)))
          )
          (if (volume_test_object kill_volume (list_get (players) 1))
            (unit_kill (unit (list_get (players) 1)))
          )
        )

    - type: dormant
      info:
        en: >
          Sleeps until started with `wake`, runs until there are no instructions
          left, then stops. Calling `wake` a second time will not restart the
          script.
        es:
      ex: >-
        (script dormant save_valley_canyon
          (sleep_until (= 0 (ai_living_count valley_canyon)) 10)
          (game_save_no_timeout)
        )

    - type: startup
      info:
        en: Performed only on map startup.
        es:
      ex: >-
        (script startup mission_a30
          (hud_show_motion_sensor false)
          (fade_out 0 0 0 0)
          (print "mission script is running")
          (ai_allegiance player human)
          ;...
        )

    - type: static
      info:
        en: Performed when called from another script.
        es:
      ex: >-
        (script static "unit" player0
          (unit (list_get (players) 0))
        )

    - type: stub
      info:
        en: >
          A `stub` script by itself does nothing. It allows you to pre-declare a
          `static` script without providing a script body.
          This allows other scripts to invoke a `static` script without the full
          function body being declared yet.
          <br/><br/>
          The script you override a `stub` with must have the same "signature" (
          i.e. name, parameters, and return type). A stub cannot be declared more
          than once. The full implementation of a `stub` *may* be placed in
          another script file.
          <br/><br/>
          If you're familiar with C function prototypes, this is very similar.
        es:
      ex: (script stub object player0)

ValueTypes:
  columns:
    - key: type
      href: true
      name:
        en: Type
        es: Tipo
      format: code
    - key: info
      name:
        en: Details
        es:
      format: text
    - key: ex
      name:
        en: Example
        es: Ejemplo
      format: text
  slugKey: type
  rows:
    - type: boolean
      info:
        en: A value that is true or false
        es:
      ex: true <br/> false <br/> 1 <br/> 0

    - type: real
      info:
        en: 'Floating point (decimal) value <br/> Value Range: 3.4E +/- 38 (6 digits)'
        es:
      ex: '3.000000'

    - type: short
      info:
        en: 'Short integer value <br/> Value Range: +/- 32,767'
        es:
      ex: '2'

    - type: long
      info:
        en: 'Long integer value <br/> Value Range: +/- 2,147,483,648'
        es:
      ex: '2000000000'

    - type: string
      info:
        en: >
          String of characters in double quotes <br/> Max number of characters: 32
        es:
      ex: '"This is a string."'

    - type: trigger_volume
      info:
        en: A "Trigger Volumes" value (a block in the [scenario][] tag)
        es:
      ex:

    - type: cutscene_flag
      info:
        en: A "Cutscene Flags" value (a block in the [scenario][] tag)
        es:
      ex:

    - type: cutscene_camera_point
      info:
        en: A "Cutscene Camera Points" value (a block in the [scenario][] tag)
        es:
      ex:

    - type: cutscene_title
      info:
        en: A "Cutscene Titles" value (a block in the [scenario][] tag)
        es:
      ex:

    - type: cutscene_recording
      info:
        en: >
          A "Cutscene Recording" value that isn't in the public HaloCE
          [scenario][] tag?
        es:
      ex:

    - type: device_group
      info:
        en: A "Device Groups" value (a block in the [scenario][] tag)
        es:
      ex:

    - type: ai
      info:
        en: An "Encounters" value
        es:
      ex:

    - type: ai_command_list
      info:
        en: A "Command Lists" value (a block in the [scenario][] tag)
        es:
      ex:

    - type: starting_profile
      info:
        en: A "Player Starting Profile" value (a block in the [scenario][] tag)
        es:
      ex:

    - type: conversation
      info:
        en: A "AI Conversations" value (a block in the [scenario][] tag)
        es:
      ex:

    - type: navpoint
      info:
        en:
        es:
      ex:

    - type: hud_message
      info:
        en: '[HUD message text][hud_message_text]'
        es:
      ex:

    - type: object_list
      info:
        en: An object list
        es:
      ex:

    - type: sound
      info:
        en: '[Sound][]'
        es:
      ex:

    - type: effect
      info:
        en: '[Effect][]'
        es:
      ex:

    - type: damage
      info:
        en: '[Damage Effect][damage_effect]'
        es:
      ex:

    - type: looping_sound
      info:
        en: '[Sound Looping][sound_looping]'
        es:
      ex:

    - type: animation_graph
      info:
        en: '[Model Animations][model_animations]'
        es:
      ex:

    - type: actor_variant
      info:
        en: '[Actor variant][actor_variant]'
        es:
      ex:

    - type: damage_effect
      info:
        en: '[Damage Effect][damage_effect]'
        es:
      ex:

    - type: object_definition
      info:
        en:
        es:
      ex:

    - type: game_difficulty
      info:
        en: easy <br/> normal <br/> hard <br/> impossible
        es:
      ex:

    - type: team
      info:
        en: player <br/> human <br/> covenant <br/> flood <br/> sentinal
        es:
      ex:

    - type: ai_default_state
      info:
        en: >
          none <br/> sleeping <br/> alert <br/> moving <br/> guarding <br/>
          searching <br/> fleeing
        es:
      ex:

    - type: actor_type
      info:
        en: ie, elite
        es:
      ex:

    - type: hud_corner
      info:
        en: top_left <br/> top_right <br/> bottom_left <br/> bottom_right
        es:
      ex:

    - type: object
      info:
        en: '[Object][]'
        es:
      ex:

    - type: unit
      info:
        en: '[Unit][]'
        es:
      ex:

    - type: vehicle
      info:
        en: '[Vehicle][]'
        es:
      ex:

    - type: weapon
      info:
        en: '[Weapon][]'
        es:
      ex:

    - type: device
      info:
        en: '[Device][]'
        es:
      ex:

    - type: scenery
      info:
        en: '[Scenery][]'
        es:
      ex:

    - type: object_name
      info:
        en: An "Object Names" value (a block in the [scenario][] tag)
        es:
      ex:

    - type: unit_name
      info:
        en: A "Bipeds" value (a block in the [scenario][] tag)
        es:
      ex:

    - type: vehicle_name
      info:
        en: A "Vehicles" value (a block in the [scenario][] tag)
        es:
      ex:

    - type: weapon_name
      info:
        en: A "Weapons" value (a block in the [scenario][] tag)
        es:
      ex:

    - type: device_name
      info:
        en: A "Device" value (a block in the [scenario][] tag)
        es:
      ex:

    - type: scenery_name
      info:
        en: A "Scenery" value (a block in the [scenario][] tag)
        es:
      ex:

OperatorsAndKeywords:
  columns:
    - key: type
      name:
        en: Expression
        es:
      format: text
    - key: ex
      name:
        en: Example
        es: Ejemplo
      format: text
  rows:
    - slug: plus
      type: |
        ```hsc
        (+ <number_1> <number_2> [... <number_n>])
        ```
        Returns the sum of all specified expressions.
      ex: |
        ```hsc
        (+ 5 6 7 8 9)
        ; returns: 35
        ```

    - slug: minus
      type: |
        ```hsc
        (- <number_1> <number_2>)
        ```
        Returns the difference of two expressions.
      ex: |
        ```hsc
        (- 10 5)
        ; returns: 5
        ```

    - slug: mult
      type: |
        ```hsc
        (* <number_1> <number_2> [... <number_n>])
        ```
        Returns the product of all specified expressions.
      ex: |
        ```hsc
        (* 5 5)
        ; returns: 25
        (* 5.5 6)
        ; returns: 33
        ```

    - slug: div
      type: |
        ```hsc
        (/ <number_1> <number_2>)
        ```
        Returns the quotient of two expressions.
      ex: |
        ```hsc
        (/ 10 5)
        ; returns: 2
        (/ 2.5 2)
        ; returns: 1.25

    - slug: eq
      type: |
        ```hsc
        (= <expression_1> <expression_2>)
        ```
        Returns true if two expressions are equal.
      ex: |
        ```hsc
        (= (hud_get_timer_ticks) 0)
        ```

    - slug: ne
      type: |
        ```hsc
        (!= <expression_1> <expression_2>)
        ```
        Returns true if two expressions are not equal.
      ex: |
        ```hsc
        (!= (hud_get_timer_ticks) 0)
        ```

    - slug: gt
      type: |
        ```hsc
        (> <number_1> <number_2>)
        ```
        Returns true if `number_1` is larger than `number_2`.
      ex: |
        ```hsc
        (> 10 5)
        ; returns: true
        (> 5 10)
        ; returns: false
        ```

    - slug: lt
      type: |
        ```hsc
        (< <number_1> <number_2>)
        ```
        Returns true if `number_1` is smaller than `number_2`.
      ex: |
        ```hsc
        (> 4 8)
        ; returns: true
        (> 8 4)
        ; returns: false
        ```

    - slug: ge
      type: |
        ```hsc
        (>= <number_1> <number_2>)
        ```
        Returns true if `number_1` is larger than or equal `number_2`.
      ex: |
        ```hsc
        (>= 10 10)
        ; returns: true
        (>= 5 10)
        ; returns: false
        ```

    - slug: le
      type: |
        ```hsc
        (<= <number_1> <number_2>)
        ```
        Returns true if `number_1` is smaller than or equal `number_2`.
      ex: |
        ```hsc
        (>= 4 4)
        ; returns: true
        (>= 8 4)
        ; returns: false
        ```

    - slug: and
      type: |
        ```hsc
        (and <boolean_1> <boolean_2> [... <boolean_n>])
        ```
        Returns true if all specified expressions are true.
      ex: |
        ```hsc
        (and (player_action_test_action) true)
        ```

    - slug: begin
      type: |
        ```hsc
        (begin
          <expression_1>
          <expression_2>
          [... <expression_n>]
        )
        ```
        Returns the last expression in a sequence after evaluating the
        sequence in order
      ex: |
        ```hsc
        (begin
          something
          something_else
          20
        )
        ; returns: 20
        ```

    - slug: begin_random
      type: |
        ```hsc
        (begin_random
          <expression_1>
          <expression_2>
          [... <expression_n>]
        )
        ```
        Evaluates the sequence of expressions in random order and returns the
        last value evaluated. This function can contain up to 32 expressions.
      ex: |
        ```hsc
        (begin_random
          something
          something_else
          20
        )
        ```

    - slug: cond
      type: |
        ```hsc
        (cond
          (<boolean_1> <result_1>)
          [(<boolean_2> <result_2>) [...]]
        )
        ```
        Returns the value associated with the first true condition. Has no default value.
      ex: |
        ```hsc
        (cond
          (false_val 10)
          (true_val 20)
        )
        ; returns: 20
        ```

    - slug: global
      type: |
        ```hsc
        (global <type> <name> <inital value>)
        ```
        Makes a new global script variable.
      ex: |
        ```hsc
        (global boolean bsl_sucks true)
        ```

    - slug: if
      type: |
        ```hsc
        (if <boolean>
          <expression>
          [<else>]
        )
        ```
        Returns one of two values based on the value of a condition.
      ex: |
        ```hsc
        (if (bsl_sucks)
          (print "Stop whining.")
        )
        ```

    - slug: inspect
      type: |
        ```hsc
        (inspect <expression>)
        ```
        Prints the value of an expression to the screen for debugging purposes.
      ex: |
        ```hsc
        (inspect (+ 3 4))
        ; outputs: 7
        ```

    - slug: min
      type: |
        ```hsc
        (min <number_1> <number_2> [... <number_n>])
        ```
        Returns the minimum of all specified expressions.
      ex: |
        ```hsc
        (min 60 5 10)
        ; returns: 5
        ```

    - slug: max
      type: |
        ```hsc
        (max <number_1> <number_2> [... <number_n>])
        ```
        Returns the maximum of all specified expressions.
      ex: |
        ```hsc
        (max 60 5 10)
        ; returns: 60
        ```

    - slug: not
      type: |
        ```hsc
        (not <boolean>)
        ```
        Returns the opposite of the expression.
      ex: |
        ```hsc
        (not bsl_sucks)
        ; returns: false
        ```

    - slug: or
      type: |
        ```hsc
        (or <boolean_1> <boolean_2> [... <boolean_n>])
        ```
        Returns true if any specified expressions are true.
      ex: |
        ```hsc
        (or (player_action_test_action) true)
        ; returns: true
        ```

    - slug: script
      type: |
        ```hsc
        (script <script type> [<return type>] <name>)
        ```
        Defines a new script.
      ex: '[See above example][scripting#basics]'

    - slug: set
      type: |
        ```hsc
        (set <variable name> <value>)
        ```
        Sets the value of a defined global variable.
      ex: |
        ```hsc
        (set bsl_sucks true)
        ```

    - slug: sleep
      type: |
        ```hsc
        (sleep <short> [<script>])
        ```
        Pauses execution of this script (or, optionally, another script) for
        the specified number of ticks (1 tick = 1/30 second)
      ex: |
        ```hsc
        (sleep 30 more_weapons)
        ```

    - slug: sleep_until
      type: |
        ```hsc
        (sleep_until <condition> [short_1] [short_2])
        ```
        Pauses execution of this script until `condition` is true.
        By default, this checks once per second. If `short_1` is specified, it
        checks every `short_1` ticks instead. By default, this will await the
        condition indefinitely. `short_2` can be used to timeout after a
        certain number of ticks, instead. After the timeout, the script will
        continue on as if `condition` became true.
      ex: |
        ```hsc
        (sleep_until false 5 600)
        ```

    - slug: wake
      type: |
        ```hsc
        (wake <script name>)
        ```
        Wakes a sleeping or dormant script in the next update.
      ex: |
        ```hsc
        (wake more_weapons)
        ```

    - slug: thread_sleep
      type: |
        ```hsc
        (thread_sleep <long>)
        ```
        Sleeps the calling thread for the specified number of ms.
      ex: |
        ```hsc
        (thread_sleep 20)
        ; returns: sleeps for 20ms
        ```

Functions:
  columns:
    - key: info
      name:
        en: Function
      format: text
  rows:
    - slug: activate_nav_point_flag
      info:
        en: >-
          ```hsc

          (activate_nav_point_flag <navpoint> <unit> <cutscene_flag> <real>)

          ```

          Activates a nav point type `<string>` attached to (local) player `<unit>`
          anchored to a flag with a vertical offset `<real>`. If the player is not
          local to the machine, this will fail.
    - slug: activate_nav_point_object
      info:
        en: >-
          ```hsc

          (activate_nav_point_object <navpoint> <unit> <object> <real>)

          ```

          Activates a nav point type <string> attached to (local) player <unit>
          anchored to an object with a vertical offset <real>. If the player is
          not local to the machine, this will fail.
    - slug: activate_team_nav_point_flag
      info:
        en: >-
          ```hsc

          (activate_team_nav_point_flag <navpoint> <team> <cutscene_flag>
          <real>)

          ```

          Activates a nav point type <string> attached to a team anchored to a
          flag with a vertical offset <real>. If the player is not local to the
          machine, this will fail.
    - slug: activate_team_nav_point_object
      info:
        en: >-
          ```hsc

          (activate_team_nav_point_object <navpoint> <team> <object> <real>)

          ```

          Activates a nav point type <string> attached to a team anchored to an
          object with a vertical offset <real>. If the player is not local to
          the machine, this will fail.
    - slug: ai_actors
      info:
        en: |-
          ```hsc
          (ai_actors <ai>)
          ```
          Converts an ai reference to an object list
    - slug: ai_allegiance
      info:
        en: |-
          ```hsc
          (ai_allegiance <team> <team>)
          ```
          Creates an allegiance between two teams
    - slug: ai_allegiance_broken
      info:
        en: >-
          ```hsc

          (ai_allegiance_broken <team> <team>)

          ```

          Returns whether two teams have an allegiance that is currently broken
          by traitorous behavior
    - slug: ai_allegiance_remove
      info:
        en: |-
          ```hsc
          (ai_allegiance_remove <team> <team>)
          ```
          Destroys an allegiance between two teams
    - slug: ai_allow_charge
      info:
        en: |-
          ```hsc
          (ai_allow_charge <ai> <boolean>)
          ```
          Either enables or disables charging behavior for a group of actors
    - slug: ai_allow_dormant
      info:
        en: |-
          ```hsc
          (ai_allow_dormant <ai> <boolean>)
          ```
          Either enables or disables automatic dormancy for a group of actors
    - slug: ai_attach
      info:
        en: |-
          ```hsc
          (ai_attach <unit> <ai>)
          ```
          Attaches the specified unit to the specified encounter
    - slug: ai_attach_free
      info:
        en: |-
          ```hsc
          (ai_attach_free <unit> <actor_variant>)
          ```
          Attaches a unit to a newly created free actor of the specified type
    - slug: ai_attack
      info:
        en: |-
          ```hsc
          (ai_attack <ai>)
          ```
          Makes the specified platoon(s) go into the attacking state
    - slug: ai_automatic_migration_target
      info:
        en: |-
          ```hsc
          (ai_automatic_migration_target <ai> <boolean>)
          ```
          Enables or disables a squad as being an automatic migration target
    - slug: ai_berserk
      info:
        en: |-
          ```hsc
          (ai_berserk <ai> <boolean>)
          ```
          Forces a group of actors to start or stop berserking
    - slug: ai_braindead
      info:
        en: >-
          ```hsc

          (ai_braindead <ai> <boolean>)

          ```

          Makes a group of actors braindead, or restores them to life (in their
          initial state)
    - slug: ai_braindead_by_unit
      info:
        en: >-
          ```hsc

          (ai_braindead_by_unit <object_list> <boolean>)

          ```

          Makes a list of objects braindead, or restores them to life. If you
          pass in a vehicle index, it makes all actors in that vehicle braindead
          (including any built-in guns).
    - slug: ai_command_list
      info:
        en: |-
          ```hsc
          (ai_command_list <ai> <ai_command_list>)
          ```
          Tells a group of actors to begin executing the specified command list
    - slug: ai_command_list_advance
      info:
        en: >-
          ```hsc

          (ai_command_list_advance <ai>)

          ```

          Tells a group of actors that are running a command list that they may
          advance further along the list (if they are waiting for a stimulus)
    - slug: ai_command_list_advance_by_unit
      info:
        en: |-
          ```hsc
          (ai_command_list_advance_by_unit <unit>)
          ```
          Just like ai_command_list_advance but operates upon a unit instead
    - slug: ai_command_list_by_unit
      info:
        en: |-
          ```hsc
          (ai_command_list_by_unit <unit> <ai_command_list>)
          ```
          Tells a named unit to begin executing the specified command list
    - slug: ai_command_list_status
      info:
        en: >-
          ```hsc

          (ai_command_list_status <object_list>)

          ```

          Gets the status of a number of units running command lists: 0 = none,
          1 = finished command list, 2 = waiting for stimulus, 3 = running
          command list
    - slug: ai_conversation_status
      info:
        en: >-
          ```hsc

          (ai_conversation_status <conversation>)

          ```

          Returns the status of a conversation (0=none, 1=trying to begin,
          2=waiting for guys to get in position, 3=playing, 4=waiting to
          advance, 5=could not begin, 6=finished successfully, 7=aborted midway)
    - slug: ai_conversation
      info:
        en: >-
          ```hsc

          (ai_conversation <conversation>)

          ```

          Tries to add an entry to the list of conversations waiting to play.
          Returns FALSE if the required units could not be found to play the
          conversation, or if the player is too far away and the 'delay' flag is
          not set.
    - slug: ai_conversation_advance
      info:
        en: |-
          ```hsc
          (ai_conversation_advance <conversation>)
          ```
          Tells a conversation that it may advance
    - slug: ai_conversation_line
      info:
        en: >-
          ```hsc

          (ai_conversation_line <conversation>)

          ```

          Returns which line the conversation is currently playing, or 999 if
          the conversation is not currently playing.
    - slug: ai_conversation_stop
      info:
        en: |-
          ```hsc
          (ai_conversation_stop <conversation>)
          ```
          Stops a conversation from playing or trying to play
    - slug: ai_debug_communication_focus
      info:
        en: |-
          ```hsc
          (ai_debug_communication_focus <string(s)>)
          ```
          Focuses (or stops focusing) a set of unit vocalization types
    - slug: ai_debug_communication_ignore
      info:
        en: >-
          ```hsc

          (ai_debug_communication_ignore <string(s)>)

          ```

          Ignores (or stops ignoring) a set of AI communication types when
          printing out communications
    - slug: ai_debug_communication_suppress
      info:
        en: |-
          ```hsc
          (ai_debug_communication_suppress <string(s)>)
          ```
          Suppresses (or stops suppressing) a set of AI communication types
    - slug: ai_debug_sound_point_set
      info:
        en: |-
          ```hsc
          (ai_debug_sound_point_set)

          ```
          Drops the AI debugging sound point at the camera location
    - slug: ai_debug_speak
      info:
        en: |-
          ```hsc
          (ai_debug_speak <string>)
          (ai_debug_speak "pain minor")
          ```
          Makes the currently selected AI speak a vocalization
    - slug: ai_debug_speak_list
      info:
        en: |-
          ```hsc
          (ai_debug_speak_list <string>)
          (ai_debug_speak_list "involuntary")
          ```
          Makes the currently selected AI speak a list of vocalizations
    - slug: ai_debug_teleport_to
      info:
        en: |-
          ```hsc
          (ai_debug_teleport_to <ai>)
          ```
          Teleports all players to the specified encounter
    - slug: ai_debug_vocalize
      info:
        en: |-
          ```hsc
          (ai_debug_vocalize <string> <string>)
          ```
          Makes the selected AI vocalize
    - slug: ai_defend
      info:
        en: |-
          ```hsc
          (ai_defend <ai>)
          ```
          Makes the specified platoon(s) go into the defending state
    - slug: ai_deselect
      info:
        en: |-
          ```hsc
          (ai_deselect)

          ```
          Clears the selected encounter
    - slug: ai_detach
      info:
        en: |-
          ```hsc
          (ai_detach <unit>)
          ```
          Detaches the specified unit from all AI
    - slug: ai_dialogue_triggers
      info:
        en: |-
          ```hsc
          (ai_dialogue_triggers <boolean>)
          (ai_dialogue_triggers true)
          (ai_dialogue_triggers false)
          ```
          Turns impromptu dialogue on or off
    - slug: ai_disregard
      info:
        en: >-
          ```hsc

          (ai_disregard <object_list> <boolean>)

          (ai_disregard (players) true)

          (ai_disregard (players) false)

          ```

          If true, forces all actors to completely disregard the specified
          units, otherwise lets them acknowledge the units again.
    - slug: ai_erase
      info:
        en: |-
          ```hsc
          (ai_erase <ai>)
          ```
          Erases the specified encounter and/or squad
    - slug: ai_erase_all
      info:
        en: |-
          ```hsc
          (ai_erase_all)
          ```
          Erases all AI
    - slug: ai_exit_vehicle
      info:
        en: |-
          ```hsc
          (ai_exit_vehicle <ai>)
          ```
          Tells a group of actors to get out of any vehicles that they are in
    - slug: ai_follow_distance
      info:
        en: >-
          ```hsc

          (ai_follow_distance <ai> <real>)

          ```

          Sets the distance threshold which will cause squads to migrate when
          following someone
    - slug: ai_follow_target_ai
      info:
        en: >-
          ```hsc

          (ai_follow_target_ai <ai> <ai>)

          ```

          Sets the follow target for an encounter to be a group of AI
          (encounter, squad or platoon)
    - slug: ai_follow_target_disable
      info:
        en: |-
          ```hsc
          (ai_follow_target_disable <ai>)
          ```
          Turns off following for an encounter
    - slug: ai_follow_target_players
      info:
        en: |-
          ```hsc
          (ai_follow_target_players <ai>)
          ```
          Sets the follow target for an encounter to be the closest player. AI
          follow their target by [moving to firing positions][ai#firing-positions]
          near their target with the same letter label.
    - slug: ai_follow_target_unit
      info:
        en: |-
          ```hsc
          (ai_follow_target_unit <ai> <unit>)
          ```
          Sets the follow target for an encounter to be a specific [unit][].
    - slug: ai_force_active
      info:
        en: >-
          ```hsc

          (ai_force_active <ai> <boolean>)

          ```

          Forces an encounter to remain active (i.e. not freeze in place) even
          if there are no players nearby
    - slug: ai_force_active_by_unit
      info:
        en: >-
          ```hsc

          (ai_force_active_by_unit <unit> <boolean>)

          ```

          Forces a named actor that is NOT in an encounter to remain active
          (i.e. not freeze in place) even if there are no players nearby
    - slug: ai_free
      info:
        en: |-
          ```hsc
          (ai_free <ai>)
          ```
          Removes a group of actors from their encounter and sets them free
    - slug: ai_free_units
      info:
        en: >-
          ```hsc

          (ai_free_units <object_list>)

          ```

          Removes a set of units from their encounter (if any) and sets them
          free
    - slug: ai_go_to_vehicle
      info:
        en: >-
          ```hsc

          (ai_go_to_vehicle <ai> <unit> <string>)

          ```

          Tells a group of actors to get into a vehicle, in the
          substring-specified seats (e.g. passenger for pelican). Does not
          interrupt any actors who are already going to vehicles.
    - slug: ai_go_to_vehicle_override
      info:
        en: >-
          ```hsc

          (ai_go_to_vehicle_override <ai> <unit> <string>)

          ```

          Tells a group of actors to get into a vehicle, in the
          substring-specified seats (e.g. passenger for pelican). Any actors who
          are already going to vehicles will stop and go to this one instead!
    - slug: ai_going_to_vehicle
      info:
        en: >-
          ```hsc

          (ai_going_to_vehicle <unit>)

          ```

          Return the number of actors that are still trying to get into the
          specified vehicle
    - slug: ai_grenades
      info:
        en: |-
          ```hsc
          (ai_grenades <boolean>)
          ```
          Turns grenade inventory on or off
    - slug: ai_is_attacking
      info:
        en: >-
          ```hsc

          (ai_is_attacking <ai>)

          ```

          Returns whether a platoon is in the attacking mode (or if an encounter
          is specified, returns whether any platoon in that encounter is
          attacking)
    - slug: ai_kill
      info:
        en: |-
          ```hsc
          (ai_kill <ai>)
          ```
          Instantly kills the specified encounter and/or squad
    - slug: ai_kill_silent
      info:
        en: >-
          ```hsc

          (ai_kill_silent <ai>)

          ```

          Instantly and silently (no animation or sound played) kills the
          specified encounter and/or squad
    - slug: ai_lines
      info:
        en: |-
          ```hsc
          (ai_lines)
          ```
          Cycles through AI line-spray modes
    - slug: ai_link_activation
      info:
        en: >-
          ```hsc

          (ai_link_activation <ai> <ai>)

          ```

          Links the first encounter so that it will be made active whenever it
          detects that the second encounter is active
    - slug: ai_living_count
      info:
        en: >-
          ```hsc

          (ai_living_count <ai>)

          ```

          Return the number of living actors in the specified encounter and/or
          squad
    - slug: ai_living_fraction
      info:
        en: >-
          ```hsc

          (ai_living_fraction <ai>)

          ```

          Return the fraction `[0-1]` of living actors in the specified
          encounter and/or squad
    - slug: ai_look_at_object
      info:
        en: |-
          ```hsc
          (ai_look_at_object <unit> <object>)
          ```
          Tells an actor to look at an object until further notice
    - slug: ai_magically_see_encounter
      info:
        en: |-
          ```hsc
          (ai_magically_see_encounter <ai> <ai>)
          ```
          Makes one encounter magically aware of another
    - slug: ai_magically_see_players
      info:
        en: |-
          ```hsc
          (ai_magically_see_players <ai>)
          ```
          Makes an encounter magically aware of nearby players
    - slug: ai_magically_see_unit
      info:
        en: |-
          ```hsc
          (ai_magically_see_unit <ai> <unit>)
          ```
          Makes an encounter magically aware of the specified unit
    - slug: ai_maneuver
      info:
        en: >-
          ```hsc

          (ai_maneuver <ai>)

          ```

          Makes all squads in the specified platoon(s) maneuver to their
          designated maneuver squads
    - slug: ai_maneuver_enable
      info:
        en: >-
          ```hsc

          (ai_maneuver_enable <ai> <boolean>)

          ```

          Enables or disables the maneuver/retreat rule for an encounter or
          platoon. The rule will still trigger, but none of the actors will be
          given the order to change squads.
    - slug: ai_migrate
      info:
        en: |-
          ```hsc
          (ai_migrate <ai> <ai>)
          ```
          Makes all or part of an encounter move to another encounter
    - slug: ai_migrate_and_speak
      info:
        en: >-
          ```hsc

          (ai_migrate_and_speak <ai> <ai> <string>)

          ```

          Makes all or part of an encounter move to another encounter, and say
          their `advance` or `retreat` speech lines.
    - slug: ai_migrate_by_unit
      info:
        en: |-
          ```hsc
          (ai_migrate_by_unit <object_list> <ai>)
          ```
          Makes a named vehicle or group of units move to another encounter
    - slug: ai_nonswarm_count
      info:
        en: >-
          ```hsc

          (ai_nonswarm_count <ai>)

          ```

          Return the number of non-swarm actors in the specified encounter
          and/or squad
    - slug: ai_place
      info:
        en: |-
          ```hsc
          (ai_place <ai>)
          ```
          Places the specified encounter on the map
    - slug: ai_playfight
      info:
        en: |-
          ```hsc
          (ai_playfight <ai> <boolean>)
          ```
          Sets an encounter to be playfighting or not
    - slug: ai_prefer_target
      info:
        en: >-
          ```hsc

          (ai_prefer_target <object_list> <boolean>)

          ```

          If true, *ALL* enemies will prefer to attack the specified units. If
          false, removes the preference.
    - slug: ai_reconnect
      info:
        en: >-
          ```hsc

          (ai_reconnect)

          ```

          Reconnects all AI information to the current structure bsp (use this
          after you create encounters or command lists in sapien, or place new
          firing points or command list points)
    - slug: ai_renew
      info:
        en: >-
          ```hsc

          (ai_renew <ai>)

          ```

          Refreshes the health and grenade count of a group of actors, so they
          are as good as new
    - slug: ai_retreat
      info:
        en: >-
          ```hsc

          (ai_retreat <ai>)

          ```

          Makes all squads in the specified platoon(s) maneuver to their
          designated maneuver squads
    - slug: ai_select
      info:
        en: |-
          ```hsc
          (ai_select <ai>)
          ```
          Selects the specified encounter
    - slug: ai_set_blind
      info:
        en: |-
          ```hsc
          (ai_set_blind <ai> <boolean>)
          ```
          Enables or disables sight for actors in the specified encounter
    - slug: ai_set_current_state
      info:
        en: >-
          ```hsc

          (ai_set_current_state <ai> <ai_default_state>)

          ```

          Sets the current state of a group of actors. WARNING: may have
          unpredictable results on actors that are in combat.
    - slug: ai_set_deaf
      info:
        en: |-
          ```hsc
          (ai_set_deaf <ai> <boolean>)
          ```
          Enables or disables hearing for actors in the specified encounter
    - slug: ai_set_respawn
      info:
        en: |-
          ```hsc
          (ai_set_respawn <ai> <boolean>)
          ```
          Enables or disables respawning in the specified encounter
    - slug: ai_set_return_state
      info:
        en: >-
          ```hsc

          (ai_set_return_state <ai> <ai_default_state>)

          ```

          Sets the state that a group of actors will return to when they have
          nothing to do
    - slug: ai_set_team
      info:
        en: |-
          ```hsc
          (ai_set_team <ai> <team>)
          ```
          Makes an encounter change to a new team
    - slug: ai_spawn_actor
      info:
        en: |-
          ```hsc
          (ai_spawn_actor <ai>)
          ```
          Spawns a single actor in the specified encounter and/or squad
    - slug: ai_status
      info:
        en: >-
          ```hsc

          (ai_status <ai>)

          ```

          Returns the most severe combat status of a group of actors
          (0=inactive, 1=noncombat, 2=guarding, 3=search/suspicious, 4=definite
          enemy(heard or magic awareness), 5=visible enemy, 6=engaging in
          combat)
    - slug: ai_stop_looking
      info:
        en: |-
          ```hsc
          (ai_stop_looking <unit>)
          ```
          Tells an actor to stop looking at whatever it's looking at
    - slug: ai_strength
      info:
        en: >-
          ```hsc

          (ai_strength <ai>)

          ```

          Return the current strength (average body vitality from 0-1) of the
          specified encounter and/or squad
    - slug: ai_swarm_count
      info:
        en: >-
          ```hsc

          (ai_swarm_count <ai>)

          ```

          Return the number of swarm actors in the specified encounter and/or
          squad
    - slug: ai_teleport_to_starting_location
      info:
        en: >-
          ```hsc

          (ai_teleport_to_starting_location <ai>)

          ```

          Teleports a group of actors to the starting locations of their current
          squad(s)
    - slug: ai_teleport_to_starting_location_if_unsupported
      info:
        en: >-
          ```hsc

          (ai_teleport_to_starting_location_if_unsupported <ai>)

          ```

          Teleports a group of actors to the starting locations of their current
          squad(s), only if they are not supported by solid ground (i.e. if they
          are falling after switching BSPs).
    - slug: ai_try_to_fight
      info:
        en: >-
          ```hsc

          (ai_try_to_fight <ai> <ai>)

          ```

          Causes a group of actors to preferentially target another group of
          actors
    - slug: ai_try_to_fight_nothing
      info:
        en: |-
          ```hsc
          (ai_try_to_fight_nothing <ai>)
          ```
          Removes the preferential target setting from a group of actors
    - slug: ai_try_to_fight_player
      info:
        en: |-
          ```hsc
          (ai_try_to_fight_player <ai>)
          ```
          Causes a group of actors to preferentially target the player
    - slug: ai_vehicle_encounter
      info:
        en: >-
          ```hsc

          (ai_vehicle_encounter <unit> <ai>)

          ```

          Sets a vehicle to "belong" to a particular encounter/squad. Any actors
          who get into the vehicle will be placed in this squad. Vehicles
          potentially drivable by multiple teams need their own encounter!
    - slug: ai_vehicle_enterable_actor_type
      info:
        en: >-
          ```hsc

          (ai_vehicle_enterable_actor_type <unit> <actor_type>)

          ```

          Sets a vehicle as being impulsively enterable for actors of a certain
          type (grunt, elite, marine etc)
    - slug: ai_vehicle_enterable_actors
      info:
        en: >-
          ```hsc

          (ai_vehicle_enterable_actors <unit> <ai>)

          ```

          Sets a vehicle as being impulsively enterable for a certain
          encounter/squad of actors
    - slug: ai_vehicle_enterable_disable
      info:
        en: >-
          ```hsc

          (ai_vehicle_enterable_disable <unit>)

          ```

          Disables actors from impulsively getting into a vehicle (this is the
          default state for newly placed vehicles)
    - slug: ai_vehicle_enterable_distance
      info:
        en: >-
          ```hsc

          (ai_vehicle_enterable_distance <unit> <real>)

          ```

          Sets a vehicle as being impulsively enterable for actors within a
          certain distance
    - slug: ai_vehicle_enterable_team
      info:
        en: >-
          ```hsc

          (ai_vehicle_enterable_team <unit> <team>)

          ```

          Sets a vehicle as being impulsively enterable for actors on a certain
          team
    - slug: attract_mode_start
      info:
        en: |-
          ```hsc
          (attract_mode_start)
          ```
          N/A in pc
    - slug: bind
      info:
        en: |-
          ```hsc
          (bind <string> <string> <string>)
          ```
          Binds an input device/button combination to a game control
    - slug: breakable_surfaces_enable
      info:
        en: |-
          ```hsc
          (breakable_surfaces_enable <boolean>)
          (breakable_surfaces_enable false)
          ```
          Enables or disables breakability of all [breakable surfaces][scenario_structure_bsp#tag-field-breakable-surfaces]
          in the level
    - slug: breakable_surfaces_reset
      info:
        en: |-
          ```hsc
          (breakable_surfaces_reset)

          ```
          Restores all breakable surfaces
    - slug: camera_control
      info:
        en: |-
          ```hsc
          (camera_control <boolean>)
          (camera_control true)
          (camera_control false)
          ```
          Toggles script control of the camera
    - slug: camera_set
      info:
        en: >-
          ```hsc

          (camera_set <cutscene_camera_point> <short>)

          (camera_set somewhere_point 100)

          ```

          Moves the camera to the specified camera point over the specified
          number of ticks
    - slug: camera_set_animation
      info:
        en: |-
          ```hsc
          (camera_set_animation <animation_graph> <string>)
          ```
          Begins a prerecorded camera animation
    - slug: camera_set_dead
      info:
        en: |-
          ```hsc
          (camera_set_dead <unit>)
          (camera_set_dead (player0))
          ```
          Makes the scripted camera zoom out around a unit as if it were dead
    - slug: camera_set_first_person
      info:
        en: |-
          ```hsc
          (camera_set_first_person <unit>)
          (camera_set_first_person (player0))
          ```
          Makes the scripted camera follow a unit
    - slug: camera_set_relative
      info:
        en: >-
          ```hsc

          (camera_set_relative <cutscene_camera_point> <short> <object>)

          (camera_set_relative somewhere_point 200 warthog_mp_1)

          ```

          Moves the camera to the specified camera point over the specified
          number of ticks (position is relative to the specified object)
    - slug: camera_time
      info:
        en: >-
          ```hsc

          (camera_time)

          ```

          Returns the number of ticks remaining in the current camera
          interpolation
    - slug: change_team
      info:
        en: |-
          ```hsc
          (change_team <short>)
          (change_team 0)
          ; changes you to red
          (change_team 1)
          ; changes you to blue
          (change_team 2)
          ; auto balance
          ```
          Change your team (0=red, 1=blue, else=auto)
    - slug: cheat_active_camouflage
      info:
        en: |-
          ```hsc
          (cheat_active_camouflage)

          ```
          Gives the player active camouflage
    - slug: cheat_active_camouflage_local_player
      info:
        en: |-
          ```hsc
          (cheat_active_camouflage_local_player <short>)
          (cheat_active_camouflage_local_player 1)
          ```
          Gives the player active camouflage
    - slug: cheat_all_powerups
      info:
        en: |-
          ```hsc
          (cheat_all_powerups)

          ```
          Drops all powerups near player
    - slug: cheat_all_vehicles
      info:
        en: |-
          ```hsc
          (cheat_all_vehicles)

          ```
          Drops all vehicles on player
    - slug: cheat_all_weapons
      info:
        en: |-
          ```hsc
          (cheat_all_weapons)

          ```
          Drops all weapons near player
    - slug: cheat_spawn_warthog
      info:
        en: |-
          ```hsc
          (cheat_spawn_warthog)

          ```
          Drops a warthog near player
    - slug: cheat_teleport_to_camera
      info:
        en: |-
          ```hsc
          (cheat_teleport_to_camera)

          ```
          Teleports player to camera location
    - slug: cheats_load
      info:
        en: |-
          ```hsc
          (cheats_load)

          ```
          Reloads the cheats.txt file
    - slug: checkpoint_load
      info:
        en: |-
          ```hsc
          (checkpoint_load <string>)
          ```
          Load a saved checkpoint
    - slug: checkpoint_save
      info:
        en: |-
          ```hsc
          (checkpoint_save)

          ```
          Save last solo checkpoint
    - slug: cinematic_abort
      info:
        en: |-
          ```hsc
          (cinematic_abort)

          ```
          Aborts a cinematic
    - slug: cinematic_screen_effect_set_convolution
      info:
        en: >-
          ```hsc

          (cinematic_screen_effect_set_convolution <short> <short> <real> <real>
          <real>)

          ```

          Sets the convolution effect
    - slug: cinematic_screen_effect_set_filter
      info:
        en: >-
          ```hsc

          (cinematic_screen_effect_set_filter <real> <real> <real> <real>
          <boolean> <real>)

          ```

          Sets the filter effect
    - slug: cinematic_screen_effect_set_filter_desaturation_tint
      info:
        en: >-
          ```hsc

          (cinematic_screen_effect_set_filter_desaturation_tint <real> <real>
          <real>)

          ```

          Sets the desaturation filter tint color
    - slug: cinematic_screen_effect_set_video
      info:
        en: >-
          ```hsc

          (cinematic_screen_effect_set_video <short> <real>)

          ```

          Sets the video effect: `<noise intensity[0,1]>`, `<overbright: 0=none,
          1=2x, 2=4x>`
    - slug: cinematic_screen_effect_start
      info:
        en: |-
          ```hsc
          (cinematic_screen_effect_start <boolean>)
          ```
          Starts screen effect; pass true to clear
    - slug: cinematic_screen_effect_stop
      info:
        en: |-
          ```hsc
          (cinematic_screen_effect_stop)
          ```
          Returns control of the screen effects to the rest of the game
    - slug: cinematic_set_near_clip_distance
      info:
        en: |
          ```hsc
          (cinematic_set_near_clip_distance <real>)
          ```
    - slug: cinematic_set_title
      info:
        en: |-
          ```hsc
          (cinematic_set_title <cutscene_title>)
          ```
          Activates the chapter title
    - slug: cinematic_set_title_delayed
      info:
        en: |-
          ```hsc
          (cinematic_set_title_delayed <cutscene_title> <real>)
          ```
          Activates the chapter title, delayed by <real> seconds
    - slug: cinematic_show_letterbox
      info:
        en: |-
          ```hsc
          (cinematic_show_letterbox <boolean>)
          (cinematic_show_letterbox true)
          (cinematic_show_letterbox false)
          ```
          Sets or removes the letterbox bars
    - slug: cinematic_skip_start_internal
      info:
        en: |
          ```hsc
          (cinematic_skip_start_internal)

          ```
    - slug: cinematic_skip_stop_internal
      info:
        en: |
          ```hsc
          (cinematic_skip_stop_internal)

          ```
    - slug: cinematic_start
      info:
        en: |-
          ```hsc
          (cinematic_start)

          ```
          Initializes game to start a cinematic (interruptive) cutscene
    - slug: cinematic_stop
      info:
        en: |-
          ```hsc
          (cinematic_stop)

          ```
          Initializes the game to end a cinematic (interruptive) cutscene
    - slug: cinematic_suppress_bsp_object_creation
      info:
        en: >-
          ```hsc

          (cinematic_suppress_bsp_object_creation <boolean>)

          (cinematic_suppress_bsp_object_creation true)

          (cinematic_suppress_bsp_object_creation false)

          ```

          Suppresses or enables the automatic creation of objects during
          cutscenes due to a bsp switch
    - slug: config_one_control
      info:
        en: |-
          ```hsc
          (config_one_control <string>)
          ```
          Test function to configure a single control
    - slug: connect
      info:
        en: |-
          ```hsc
          (connect <string> <string>)
          ```
          Attempt to connect to server - use ip:port password as parameters
    - slug: crash
      info:
        en: |-
          ```hsc
          (crash <string>)
          (crash "Something is wrong")
          ```
          Crashes (for debugging)
    - slug: custom_animation
      info:
        en: >-
          ```hsc

          (custom_animation <unit> <animation_graph> <string> <boolean>)

          ```

          Starts a custom animation playing on a unit (interpolates into
          animation if last parameter is true)
    - slug: custom_animation_list
      info:
        en: >-
          ```hsc

          (custom_animation_list <object_list> <animation_graph> <string>
          <boolean>)

          ```

          Starts a custom animation playing on a unit list (interpolates into
          animation if last parameter is true)
    - slug: damage_new
      info:
        en: |-
          ```hsc
          (damage_new <damage> <cutscene_flag>)
          (damage_new "scenery\emitters\burning_flame\flame" enter_lava_flag)
          ```
          Causes the specified damage at the specified flag
    - slug: damage_object
      info:
        en: |-
          ```hsc
          (damage_object <damage> <object>)
          (damage_object "weapons\assault rifle\bullet" (player0))
          ```
          Causes the specified damage at the specified object
    - slug: deactivate_nav_point_flag
      info:
        en: >-
          ```hsc

          (deactivate_nav_point_flag <unit> <cutscene_flag>)

          ```

          Deactivates a nav point type attached to a player <unit> anchored to a
          flag
    - slug: deactivate_nav_point_object
      info:
        en: >-
          ```hsc

          (deactivate_nav_point_object <unit> <object>)

          ```

          Deactivates a nav point type attached to a player <unit> anchored to
          an object
    - slug: deactivate_team_nav_point_flag
      info:
        en: |-
          ```hsc
          (deactivate_team_nav_point_flag <team> <cutscene_flag>)
          ```
          Deactivates a nav point type attached to a team anchored to a flag
    - slug: deactivate_team_nav_point_object
      info:
        en: |-
          ```hsc
          (deactivate_team_nav_point_object <team> <object>)
          ```
          Deactivates a nav point type attached to a team anchored to an object
    - slug: debug_camera_load
      info:
        en: |-
          ```hsc
          (debug_camera_load)

          ```
          Loads the saved camera position and facing
    - slug: debug_camera_save
      info:
        en: |-
          ```hsc
          (debug_camera_save)

          ```
          Saves the camera position and facing
    - slug: debug_memory
      info:
        en: |-
          ```hsc
          (debug_memory)

          ```
          Dumps memory leaks
    - slug: debug_memory_by_file
      info:
        en: |-
          ```hsc
          (debug_memory_by_file)

          ```
          Dumps memory leaks by source file
    - slug: debug_memory_for_file
      info:
        en: |-
          ```hsc
          (debug_memory_for_file <string>)
          (debug_memory_for_file "\halopc\haloce\source\tag_files\tag_groups.c")
          ```
          Dumps memory leaks from the specified source file
    - slug: debug_sounds_distances
      info:
        en: >-
          ```hsc

          (debug_sounds_distances <string> <real> <real>)

          ```

          Changes the minimum and maximum distances for all sound classes
          matching the substring
    - slug: debug_sounds_enable
      info:
        en: |-
          ```hsc
          (debug_sounds_enable <string> <boolean>)
          ```
          Enables or disabled all sound classes matching the substring
    - slug: debug_sounds_wet
      info:
        en: |-
          ```hsc
          (debug_sounds_wet <string> <real>)
          ```
          Changes the reverb level for all sound classes matching the substring
    - slug: debug_tags
      info:
        en: |-
          ```hsc
          (debug_tags)
          ```
          Writes all memory being used by tag files into tag_dump.txt
    - slug: debug_teleport_player
      info:
        en: |
          ```hsc
          (debug_teleport_player <short> <short>)
          ```
    - slug: delete_save_game_files
      info:
        en: |-
          ```hsc
          (delete_save_game_files)

          ```
          Delete all custom profile files
    - slug: device_get_position
      info:
        en: >-
          ```hsc

          (device_get_position <device>)

          ```

          Gets the current position of the given device (used for devices
          without explicit device groups)
    - slug: device_get_position
      info:
        en: >-
          ```hsc

          (device_get_position <device>)

          ```

          Gets the current position of the given device (used for devices
          without explicit device groups)
    - slug: device_get_power
      info:
        en: |-
          ```hsc
          (device_get_power <device>)
          ```
          Gets the current power of a named device
    - slug: device_group_change_only_once_more_set
      info:
        en: |-
          ```hsc
          (device_group_change_only_once_more_set <device_group> <boolean>)
          ```
          true allows a device to change states only once
    - slug: device_group_get
      info:
        en: |-
          ```hsc
          (device_group_get <device_group>)
          ```
          Returns the desired value of the specified device group
    - slug: device_group_set
      info:
        en: |-
          ```hsc
          (device_group_set <device_group> <real>)
          ```
          Changes the desired value of the specified device group
    - slug: device_group_set_immediate
      info:
        en: |-
          ```hsc
          (device_group_set_immediate <device_group> <real>)
          ```
          Instantaneously changes the value of the specified device group
    - slug: device_one_sided_set
      info:
        en: >-
          ```hsc

          (device_one_sided_set <device> <boolean>)

          ```

          true makes the given device one-sided (only able to be opened from one
          direction), false makes it two-sided
    - slug: device_operates_automatically_set
      info:
        en: >-
          ```hsc

          (device_operates_automatically_set <device> <boolean>)

          ```

          true makes the given device open automatically when any biped is
          nearby, false makes it not
    - slug: device_set_position
      info:
        en: >-
          ```hsc

          (device_set_position <device> <real>)

          (device_set_position <device> 1.0)

          ```

          Set the desired position of the given device (used for devices without
          explicit device groups)
    - slug: device_set_position_immediate
      info:
        en: >-
          ```hsc

          (device_set_position_immediate <device> <real>)

          (device_set_position_immediate <device> 1.0)

          ```

          Instantaneously changes the position of the given device (used for
          devices without explicit device groups
    - slug: device_set_power
      info:
        en: |-
          ```hsc
          (device_set_power <device> <real>)
          (device_set_power <device> 1.0)
          ```
          Immediately sets the power of a named device to the given value
    - slug: display_scenario_help
      info:
        en: |-
          ```hsc
          (display_scenario_help <short>)
          (display_scenario_help 1)
          ```
          Display in-game help dialog
    - slug: effect_new
      info:
        en: |-
          ```hsc
          (effect_new <effect> <cutscene_flag>)
          (effect_new "effects\coop teleport" teleporting_flag)
          ```
          Starts the specified effect at the specified flag
    - slug: effect_new_on_object_marker
      info:
        en: >-
          ```hsc

          (effect_new_on_object_marker <effect> <object> <string>)

          (effect_new_on_object_marker "effects\burning large" warthog_mp
          "driver")

          ```

          Starts the specified effect on the specified object at the specified
          marker
    - slug: enable_hud_help_flash
      info:
        en: |-
          ```hsc
          (enable_hud_help_flash <boolean>)
          (enable_hud_help_flash true)
          (enable_hud_help_flash false)
          ```
          Starts/stops the help text flashing
    - slug: error_overflow_suppression
      info:
        en: |-
          ```hsc
          (error_overflow_suppression <boolean>)
          (error_overflow_suppression true)
          (error_overflow_suppression false)
          ```
          Enables or disables the suppression of error spamming
    - slug: fade_in
      info:
        en: |-
          ```hsc
          (fade_in <real> <real> <real> <short>)
          (fade_in 0.0 0.0 0.0 100)
          ```
          Does a screen fade in from a particular color in the amount of ticks
    - slug: fade_out
      info:
        en: |-
          ```hsc
          (fade_out <real> <real> <real> <short>)
          (fade_out 1.0 1.0 1.0 100)
          ```
          Does a screen fade out to a particular color in the amount of ticks
    - slug: fast_setup_network_server
      info:
        en: >-
          ```hsc

          (fast_setup_network_server <string> <string> <boolean>)

          ```

          Sets up a network server with the given map name, game variant, and
          true for remote connections, false for not
    - slug: game_all_quiet
      info:
        en: >-
          ```hsc

          (game_all_quiet)


          ```

          Returns false if there are bad guys around, projectiles in the air,
          etc.
    - slug: game_difficulty_get
      info:
        en: >-
          ```hsc

          (game_difficulty_get)


          ```

          Returns the current difficulty setting, but lies to you and will never
          return easy, instead returning normal
    - slug: game_difficulty_get_real
      info:
        en: |-
          ```hsc
          (game_difficulty_get_real)

          ```
          Returns the actual current difficulty setting without lying
    - slug: game_difficulty_set
      info:
        en: |-
          ```hsc
          (game_difficulty_set <game_difficulty>)
          (game_difficulty_set easy)
          (game_difficulty_set normal)
          (game_difficulty_set hard)
          (game_difficulty_set impossible)
          ```
          Changes the difficulty setting for the next map to be loaded
    - slug: game_is_cooperative
      info:
        en: |-
          ```hsc
          (game_is_cooperative)

          ```
          Returns true if the game is cooperative
    - slug: game_lost
      info:
        en: |-
          ```hsc
          (game_lost)
          ```
          Causes the player to revert to their previous saved checkpoint. For
          example, this is used when Keyes dies in _Truth and Reconciliation_.
    - slug: game_revert
      info:
        en: >-
          ```hsc

          (game_revert)

          ```

          Reverts to last saved game, if any (for testing, the first bastard
          that does this to me gets it in the head)
    - slug: game_reverted
      info:
        en: |-
          ```hsc
          (game_reverted)
          ```
          Don't use this for anything, you black-hearted bastards
    - slug: game_safe_to_save
      info:
        en: >-
          ```hsc

          (game_safe_to_save)

          ```

          Returns false if it would be a bad idea to save the player's game
          right now
    - slug: game_safe_to_speak
      info:
        en: >-
          ```hsc

          (game_safe_to_speak)

          ```

          Returns false if it would be a bad idea to save the player's game
          right now
    - slug: game_save
      info:
        en: >-
          ```hsc

          (game_save)

          ```

          Checks to see if it is safe to save game, then saves (gives up after 8
          seconds)
    - slug: game_save_cancel
      info:
        en: |-
          ```hsc
          (game_save_cancel)
          ```
          Cancels any pending `game_save`, timeout or not. This prevents a
          checkpoint from being created during a known loss situation.
    - slug: game_save_no_timeout
      info:
        en: >-
          ```hsc

          (game_save_no_timeout)

          ```

          Checks to see if it is safe to save game, then saves (this version
          never gives up)
    - slug: game_save_totally_unsafe
      info:
        en: |-
          ```hsc
          (game_save_totally_unsafe)

          ```
          Saves disregarding player's current situation
    - slug: game_saving
      info:
        en: |-
          ```hsc
          (game_saving)
          ```
          Checks to see if the game is trying to save a checkpoint
    - slug: game_skip_ticks
      info:
        en: |-
          ```hsc
          (game_skip_ticks <short>)
          (game_skip_ticks 5)
          ```
          Skips <short> amount of game ticks. ONLY USE IN CUTSCENES!!!
    - slug: game_speed
      info:
        en: |-
          ```hsc
          (game_speed <real>)
          (game_speed 0.5)
          ```
          Changes the game speed
    - slug: game_time
      info:
        en: |-
          ```hsc
          (game_time)

          ```
          Gets ticks elapsed since the start of the game
    - slug: game_won
      info:
        en: >-
          ```hsc

          (game_won)

          ```

          Causes the player to successfully finish the current level and move on
          to the next
    - slug: garbage_collect_now
      info:
        en: >-
          ```hsc

          (garbage_collect_now)

          ```

          Causes all garbage objects except those visible to a player to be
          collected immediately
    - slug: get_digital_forward_throttle
      info:
        en: |-
          ```hsc
          (get_digital_forward_throttle <short>)
          ```
          Gets the amount of forward throttle applied by digital device stimuli
    - slug: get_digital_pitch_increment
      info:
        en: |-
          ```hsc
          (get_digital_pitch_increment <short>)
          ```
          Gets the increment in pitch applied by digital device stimuli
    - slug: get_digital_strafe_throttle
      info:
        en: |-
          ```hsc
          (get_digital_strafe_throttle <short>)
          ```
          Gets the amount of strafe throttle applied by digital device stimuli
    - slug: get_digital_yaw_increment
      info:
        en: |-
          ```hsc
          (get_digital_yaw_increment <short>)
          ```
          Gets the increment in yaw applied by digital device stimuli
    - slug: get_gamepad_forward_threshold
      info:
        en: >-
          ```hsc

          (get_gamepad_forward_threshold <short>)

          ```

          Gets the threshold beyond which gamepad movement is full forward
          throttle
    - slug: get_gamepad_pitch_scale
      info:
        en: |-
          ```hsc
          (get_gamepad_pitch_scale <short>)
          ```
          Gets the scale for gamepad control of pitch
    - slug: get_gamepad_strafe_threshold
      info:
        en: >-
          ```hsc

          (get_gamepad_strafe_threshold <short>)

          ```

          Gets the threshold beyond which gamepad movement is full strafe
          throttle
    - slug: get_gamepad_yaw_scale
      info:
        en: |-
          ```hsc
          (get_gamepad_yaw_scale <short>)
          ```
          Gets the scale for gamepad control of yaw
    - slug: get_mouse_forward_threshold
      info:
        en: >-
          ```hsc

          (get_mouse_forward_threshold <short>)

          ```

          Gets the threshold beyond which mouse movement is full forward
          throttle
    - slug: get_mouse_pitch_scale
      info:
        en: |-
          ```hsc
          (get_mouse_pitch_scale <short>)
          ```
          Gets the scale for mouse control of pitch
    - slug: get_mouse_strafe_threshold
      info:
        en: |-
          ```hsc
          (get_mouse_strafe_threshold <short>)
          ```
          Gets the threshold beyond which mouse movement is full strafe throttle
    - slug: get_mouse_yaw_scale
      info:
        en: |-
          ```hsc
          (get_mouse_yaw_scale <short>)
          ```
          Gets the scale for mouse control of yaw
    - slug: get_pitch_rate
      info:
        en: |-
          ```hsc
          (get_pitch_rate <short>)
          ```
          Gets the yaw rate for the given player number
    - slug: get_yaw_rate
      info:
        en: |-
          ```hsc
          (get_yaw_rate <short>)
          ```
          Gets the yaw rate for the given player number
    - slug: hammer_begin
      info:
        en: |-
          ```hsc
          (hammer_begin <string> <string> <long> <short> <short>)
          ```
          Hammers the server by connecting and disconnecting repeatedly
    - slug: hammer_stop
      info:
        en: |-
          ```hsc
          (hammer_stop)

          ```
          Stops hammering the server
    - slug: help
      info:
        en: |-
          ```hsc
          (help <string>)
          (help cheats_load)
          ```
          Prints a description of the named function
    - slug: hud_blink_health
      info:
        en: |-
          ```hsc
          (hud_blink_health <boolean>)
          (hud_blink_health true)
          (hud_blink_health false)
          ```
          Starts/stops manual blinking of the health panel
    - slug: hud_blink_motion_sensor
      info:
        en: |-
          ```hsc
          (hud_blink_motion_sensor <boolean>)
          (hud_blink_motion_sensor true)
          (hud_blink_motion_sensor false)
          ```
          Starts/stops manual blinking of the motion sensor panel
    - slug: hud_blink_shield
      info:
        en: |-
          ```hsc
          (hud_blink_shield <boolean>)
          (hud_blink_shield true)
          (hud_blink_shield false)
          ```
          Starts/stops manual blinking of the shield panel
    - slug: hud_clear_messages
      info:
        en: |-
          ```hsc
          (hud_clear_messages)

          ```
          Clears all non-state messages on the hud
    - slug: hud_get_timer_ticks
      info:
        en: |-
          ```hsc
          (hud_get_timer_ticks)

          ```
          Returns the ticks left on the hud timer
    - slug: hud_help_flash_restart
      info:
        en: |-
          ```hsc
          (hud_help_flash_restart)

          ```
          Resets the timer for the help text flashing
    - slug: input_activate_joy
      info:
        en: |-
          ```hsc
          (input_activate_joy <short> <short>)
          ```
          Activates an enumerated joystick into a logical joystick slot
    - slug: input_deactivate_joy
      info:
        en: >-
          ```hsc

          (input_deactivate_joy <short>)

          ```

          Deactivates an enumerated joystick, freeing up the logical joystick
          slot
    - slug: input_find_default
      info:
        en: |-
          ```hsc
          (input_find_default <string>)
          ```
          Test function that looks up a default profile for a deviceid
    - slug: input_find_joystick
      info:
        en: |-
          ```hsc
          (input_find_joystick <string>)
          ```
          Test function to find a joystick by GUID (string representation)
    - slug: input_get_joy_count
      info:
        en: |-
          ```hsc
          (input_get_joy_count)

          ```
          Test function to return the number of joysticks enumerated
    - slug: input_is_joy_active
      info:
        en: >-
          ```hsc

          (input_is_joy_active <short>)

          ```

          Test function to determine if an enumerated joystick is activated or
          not
    - slug: input_show_joystick_info
      info:
        en: >-
          ```hsc

          (input_show_joystick_info)


          ```

          Test function to show the enumerated joystick information for all
          joystick
    - slug: list_count
      info:
        en: |-
          ```hsc
          (list_count <object_list>)
          (list_count the_warthogs)
          ```
          Returns the number of objects in a list
    - slug: list_get
      info:
        en: |-
          ```hsc
          (list_get <object_list> <short>)
          (list_get the_warthogs 3)
          ```
          Returns an item in an object list
    - slug: magic_melee_attack
      info:
        en: |-
          ```hsc
          (magic_melee_attack)

          ```
          Causes player's unit to start a melee attack
    - slug: magic_seat_name
      info:
        en: >-
          ```hsc

          (magic_seat_name <string>)

          ```

          All units controlled by the player will assume the given seat name
          (valid values are 'asleep', 'alert', 'stand', 'crouch' and 'flee')
    - slug: map_name
      info:
        en: |-
          ```hsc
          (map_name <string>)
          ; in cache builds:
          (map_name "a10")
          ; in tags builds:
          (map_name "levels\a10\a10")
          ```
          Loads a singleplayer map by scenario name. If using the
          [H1A standalone build][h1a-standalone-build], which directly loads
          tags instead of [cache files][map], use the scenario
          [tag path][tags#tag-references-and-paths] instead.
    - slug: map_reset
      info:
        en: |-
          ```hsc
          (map_reset)
          ```
          Starts the map from the beginning
    - slug: message_metrics_clear
      info:
        en: |-
          ```hsc
          (message_metrics_clear)
          ```
          Clears network messaging metrics
    - slug: message_metrics_dump
      info:
        en: |-
          ```hsc
          (message_metrics_dump <string>)
          (message_metrics_dump "")
          ```
          Dumps network messaging metrics to given file ("" for default)
    - slug: multiplayer_map_name
      info:
        en: |-
          ```hsc
          (multiplayer_map_name <string>)
          (multiplayer_map_name "schwinnzno1_alpha01a")
          ```
          Changes the name of the multiplayer map
    - slug: net_graph_clear
      info:
        en: |-
          ```hsc
          (net_graph_clear)
          ```
          Clears the net_graph
    - slug: net_graph_show
      info:
        en: |-
          ```hsc
          (net_graph_show <string> <string>)
          ```
          Changes the net_graph display (bytes/packets, sent/received)
    - slug: network_client_dump
      info:
        en: |-
          ```hsc
          (network_client_dump)
          ```
          Dumps info on network client
    - slug: network_server_dump
      info:
        en: |-
          ```hsc
          (network_server_dump)
          ```
          Dumps info on network server
    - slug: numeric_countdown_timer_get
      info:
        en: |-
          ```hsc
          (numeric_countdown_timer_get <short>)
          (numeric_countdown_timer_get 1)
          (numeric_countdown_timer_get -1)
          ```
          `<digit_index>`
    - slug: numeric_countdown_timer_restart
      info:
        en: |-
          ```hsc
          (numeric_countdown_timer_restart)
          ```
          Reset the timer
    - slug: numeric_countdown_timer_set
      info:
        en: |-
          ```hsc
          (numeric_countdown_timer_set <long> <boolean>)
          (numeric_countdown_timer_set 15500 false)
          (numeric_countdown_timer_set 10000 false)
          ```
          `<milliseconds>`, `<auto_start>`
    - slug: numeric_countdown_timer_stop
      info:
        en: |-
          ```hsc
          (numeric_countdown_timer_stop)
          ```
          Stop the timer
    - slug: object_beautify
      info:
        en: |-
          ```hsc
          (object_beautify <object> <boolean>)
          (object_beautify chief true)
          (object_beautify chief false)
          ```
          Makes an object pretty for the remainder of the levels' cutscenes
    - slug: object_can_take_damage
      info:
        en: |-
          ```hsc
          (object_can_take_damage <object_list>)
          (object_can_take_damage (players))
          ```
          Allows an object to take damage again
    - slug: object_cannot_take_damage
      info:
        en: |-
          ```hsc
          (object_cannot_take_damage <object_list>)
          (object_cannot_take_damage (players))
          ```
          Prevents an object from taking damage
    - slug: object_create
      info:
        en: |-
          ```hsc
          (object_create <object_name>)
          (object_create warthog_mp_1)
          ```
          Creates an object from the scenario
    - slug: object_create_anew
      info:
        en: |-
          ```hsc
          (object_create_anew <object_name>)
          (object_create_anew banshee_mp_1)
          ```
          Creates an object, destroying it first if it already exists
    - slug: object_create_anew_containing
      info:
        en: >-
          ```hsc

          (object_create_anew_containing <string>)

          (object_create_anew_containing "pelican")

          ```

          Creates anew all objects from the scenario whose names contain the
          given substring
    - slug: object_create_containing
      info:
        en: >-
          ```hsc

          (object_create_containing <string>)

          (object_create_containing "warthog")

          ```

          Creates all objects from the scenario whose names contain the given
          substring
    - slug: object_destroy
      info:
        en: |-
          ```hsc
          (object_destroy <object>)
          ```
          Destroys an object
    - slug: object_destroy_all
      info:
        en: |-
          ```hsc
          (object_destroy_all)
          ```
          Destroys all non player objects
    - slug: object_destroy_containing
      info:
        en: >-
          ```hsc

          (object_destroy_containing <string>)

          (object_destroy_containing "pelican")

          ```

          Destroys all objects from the scenario whose names contain the given
          substring
    - slug: object_pvs_activate
      info:
        en: |-
          ```hsc
          (object_pvs_activate <object>)
          ```
          Just another (old) name for object_pvs_set_object.
    - slug: object_pvs_clear
      info:
        en: |-
          ```hsc
          (object_pvs_clear)
          ```
          Removes the special place that activates everything it sees.
    - slug: object_pvs_set_camera
      info:
        en: >-
          ```hsc

          (object_pvs_set_camera <cutscene_camera_point>)

          ```

          Sets the specified cutscene camera point as the special place that
          activates everything it sees.
    - slug: object_pvs_set_object
      info:
        en: >-
          ```hsc

          (object_pvs_set_object <object>)

          ```

          Sets the specified object as the special place that activates
          everything it sees.
    - slug: object_set_collideable
      info:
        en: |-
          ```hsc
          (object_set_collideable <object> <boolean>)
          (object_set_collideable (player0) true)
          (object_set_collideable (player0) false)
          ```
          `false` prevents any object from colliding with the given object
    - slug: object_set_facing
      info:
        en: |-
          ```hsc
          (object_set_facing <object> <cutscene_flag>)
          (object_set_facing (player0) blue_base_flag)
          ```
          Turns the specified object in the direction of the specified flag
    - slug: object_set_melee_attack_inhibited
      info:
        en: |-
          ```hsc
          (object_set_melee_attack_inhibited <object> <boolean>)
          (object_set_melee_attack_inhibited (player0) true)
          (object_set_melee_attack_inhibited (player0) false)
          ```
          `false` prevents object from using melee attack
    - slug: object_set_permutation
      info:
        en: >-
          ```hsc

          (object_set_permutation <object> <string> <string>)

          (object_set_permutation (player0) "right arm" ~damaged)

          ```

          Sets the desired region (use `""` for all regions) to the permutation
          with the given name
    - slug: object_set_ranged_attack_inhibited
      info:
        en: |-
          ```hsc
          (object_set_ranged_attack_inhibited <object> <boolean>)
          (object_set_ranged_attack_inhibited (player0) true)
          (object_set_ranged_attack_inhibited (player0) false)
          ```
          `false` prevents object from using ranged attack
    - slug: object_set_scale
      info:
        en: >-
          ```hsc

          (object_set_scale <object> <real> <short>)

          (object_set_scale (player0) 1.5 10)

          (object_set_scale insertion_pelican 0.25 30)

          ```

          sets the scale for a given object and interpolates over the given
          number of frames to achieve that scale
    - slug: object_set_shield
      info:
        en: |-
          ```hsc
          (object_set_shield <object> <real>)
          (object_set_shield (player0) 1.0)
          ```
          Sets the shield vitality of the specified object (between 0 and 1)
    - slug: object_teleport
      info:
        en: |-
          ```hsc
          (object_teleport <object> <cutscene_flag>)
          (object_teleport (player0) red_base_flag)
          ```
          Moves the specified object to the specified flag
    - slug: object_type_predict
      info:
        en: >-
          ```hsc

          (object_type_predict <object_definition>)

          ```

          Loads textures necessary to draw an object that's about to come
          on-screen
    - slug: objects_attach
      info:
        en: |-
          ```hsc
          (objects_attach <object> <string> <object> <string>)
          (objects_attach chief "right hand" ar1 "")
          ```
          Attaches the second object to the first; both strings can be empty
    - slug: objects_can_see_flag
      info:
        en: >-
          ```hsc

          (objects_can_see_flag <object_list> <cutscene_flag> <real>)

          (objects_can_see_flag the_warthogs tunnel_flag 45)

          ```

          Returns `true` if any of the specified units are looking within the
          specified number of degrees of the flag
    - slug: objects_can_see_object
      info:
        en: >-
          ```hsc

          (objects_can_see_object <object_list> <object> <real>)

          (objects_can_see_object the_warthogs (player0) 90)

          ```

          Returns `true` if any of the specified units are looking within the
          specified number of degrees of the object
    - slug: objects_delete_by_definition
      info:
        en: |-
          ```hsc
          (objects_delete_by_definition <object_definition>)
          ```
          Deletes all objects of type `<definition>`
    - slug: objects_detach
      info:
        en: |-
          ```hsc
          (objects_detach <object> <object>)
          (objects_detach chief ar1)
          ```
          Detaches from the given parent object the given child object
    - slug: objects_predict
      info:
        en: >-
          ```hsc

          (objects_predict <object_list>)

          (objects_predict the_bipeds)

          ```

          Loads textures necessary to draw objects that are about to come
          on-screen, using the object's [predicted resources][object#tag-field-predicted-resources].
    - slug: pause_hud_timer
      info:
        en: |-
          ```hsc
          (pause_hud_timer <boolean>)
          (pause_hud_timer true)
          (pause_hud_timer false)
          ```
          Pauses or unpauses the hud timer
    - slug: play_update_history
      info:
        en: >-
          ```hsc

          (play_update_history <long> <boolean>)

          ```

          Playback client input history starting from the specified last
          completed update id
    - slug: playback
      info:
        en: |-
          ```hsc
          (playback)
          ```
          Starts game in film playback mode
    - slug: player0_joystick_set_is_normal
      info:
        en: |-
          ```hsc
          (player0_joystick_set_is_normal)
          ```
          Returns `true` if (player0) is using the normal joystick set
    - slug: player0_look_invert_pitch
      info:
        en: |-
          ```hsc
          (player0_look_invert_pitch <boolean>)
          ```
          Invert player0's look
    - slug: player0_look_pitch_is_inverted
      info:
        en: |-
          ```hsc
          (player0_look_pitch_is_inverted)
          ```
          Returns `true` if (player0)'s look pitch is inverted
    - slug: player_action_test_accept
      info:
        en: >-
          ```hsc

          (player_action_test_accept)


          ```

          Returns `true` if any player has hit accept since the last call to
          `(player_action_test_reset)`
    - slug: player_action_test_action
      info:
        en: >-
          ```hsc

          (player_action_test_action)


          ```

          Returns `true` if any player has hit the action key since the last
          call to `(player_action_test_reset)`
    - slug: player_action_test_back
      info:
        en: >-
          ```hsc

          (player_action_test_back)


          ```

          Returns `true` if any player has hit the back key since the last call
          to `(player_action_test_reset)`
    - slug: player_action_test_grenade_trigger
      info:
        en: >-
          ```hsc

          (player_action_test_grenade_trigger)


          ```

          Returns `true` if any player has used grenade trigger since the last
          call to `(player_action_test_reset)`
    - slug: player_action_test_jump
      info:
        en: >-
          ```hsc

          (player_action_test_jump)


          ```

          Returns `true` if any player has jumped since the last call to
          `(player_action_test_reset)`
    - slug: player_action_test_look_relative_all_directions
      info:
        en: >-
          ```hsc

          (player_action_test_look_relative_all_directions)


          ```

          Returns `true` if any player has looked up, down, left, and right
          since the last call to `(player_action_test_reset)`
    - slug: player_action_test_look_relative_down
      info:
        en: >-
          ```hsc

          (player_action_test_look_relative_down)


          ```

          Returns `true` if any player has looked down since the last call to
          `(player_action_test_reset)`
    - slug: player_action_test_look_relative_left
      info:
        en: >-
          ```hsc

          (player_action_test_look_relative_left)


          ```

          Returns `true` if any player has looked left since the last call to
          `(player_action_test_reset)`
    - slug: player_action_test_look_relative_right
      info:
        en: >-
          ```hsc

          (player_action_test_look_relative_right)


          ```

          Returns `true` if any player has looked right since the last call to
          `(player_action_test_reset)`
    - slug: player_action_test_look_relative_up
      info:
        en: >-
          ```hsc

          (player_action_test_look_relative_up)


          ```

          Returns `true` if any player has looked up since the last call to
          `(player_action_test_reset)`
    - slug: player_action_test_move_relative_all_directions
      info:
        en: >-
          ```hsc

          (player_action_test_move_relative_all_directions)


          ```

          Returns `true` if any player has moved forward, backward, left, and
          right since the last call to `(player_action_test_reset)`
    - slug: player_action_test_primary_trigger
      info:
        en: >-
          ```hsc

          (player_action_test_primary_trigger)


          ```

          Returns `true` if any player has used primary trigger since the last
          call to `(player_action_test_reset)`
    - slug: player_action_test_reset
      info:
        en: >-
          ```hsc

          (player_action_test_reset)


          ```

          Resets the player action test state so that all tests will return
          `false`
    - slug: player_action_test_zoom
      info:
        en: >-
          ```hsc

          (player_action_test_zoom)


          ```

          Returns `true` if any player has hit the zoom button since the last
          call to `(player_action_test_reset)`
    - slug: player_add_equipment
      info:
        en: >-
          ```hsc

          (player_add_equipment <unit> <starting_profile> <boolean>)

          ```

          Adds/resets the player's health, shield, and inventory (weapons and
          grenades) to the named profile. Resets if third parameter is `true`,
          adds if `false`.
    - slug: player_camera_control
      info:
        en: |-
          ```hsc
          (player_camera_control <boolean>)
          (player_camera_control true)
          (player_camera_control false)
          ```
          Enables/disables camera control globally
    - slug: player_effect_set_max_rotation
      info:
        en: |-
          ```hsc
          (player_effect_set_max_rotation <real> <real> <real>)
          ```
          `<yaw>` `<pitch>` `<roll>`
    - slug: player_effect_set_max_translation
      info:
        en: |-
          ```hsc
          (player_effect_set_max_translation <real> <real> <real>)
          ```
          `<x>` `<y>` `<z>`
    - slug: player_effect_set_max_vibrate
      info:
        en: |-
          ```hsc
          (player_effect_set_max_vibrate <real> <real>)
          ```
          `<left>` `<right>`
    - slug: player_effect_start
      info:
        en: |-
          ```hsc
          (player_effect_start <real> <real>)
          ```
          `<max_intensity>` `<attack time>`
    - slug: player_effect_stop
      info:
        en: |-
          ```hsc
          (player_effect_stop <real>)
          ```
          `<decay>`
    - slug: player_enable_input
      info:
        en: |-
          ```hsc
          (player_enable_input <boolean>)
          (player_enable_input true)
          (player_enable_input false)
          ```
          Toggle player input. The player can still free-look, but nothing else.
    - slug: players_unzoom_all
      info:
        en: |-
          ```hsc
          (players_unzoom_all)

          ```
          Resets zoom levels on all players
    - slug: print
      info:
        en: >-
          ```hsc

          (print <string>)

          (print "50 dollars for this?!")

          ```

          Prints a string to the console. Printed text will not appear in the
          console unless devmode is enabled (devmode 4). You can give a `print`
          call a [format](http://www.cplusplus.com/reference/cstdio/printf/)
          string (e.g. `"I have %d apples"`), but **cannot** give it format
          arguments, meaning **a format string can cause the function to read
          invalid memory and crash the game!**
    - slug: print_binds
      info:
        en: |-
          ```hsc
          (print_binds)

          ```
          Prints a list of all input bindings
    - slug: profile_activate
      info:
        en: |-
          ```hsc
          (profile_activate <string>)
          ```
          Activates profile sections based on a substring
    - slug: profile_deactivate
      info:
        en: |-
          ```hsc
          (profile_deactivate <string>)
          ```
          Deactivates profile sections based on a substring
    - slug: profile_dump
      info:
        en: |-
          ```hsc
          (profile_dump <string>)
          ```
          Dumps profile based on a substring
    - slug: profile_graph_toggle
      info:
        en: |-
          ```hsc
          (profile_graph_toggle <string>)
          ```
          Enables or disables profile graph display of a particular value
    - slug: profile_load
      info:
        en: |-
          ```hsc
          (profile_load <string>)
          (profile_load "a hobo")
          ; loads the profile "a hobo"
          ```
          Load any included builtin profiles and create profiles on disk
    - slug: profile_reset
      info:
        en: |-
          ```hsc
          (profile_reset)

          ```
          Resets profiling data
    - slug: profile_service_clear_timers
      info:
        en: |-
          ```hsc
          (profile_service_clear_timers)

          ```
          Clears the timers that are present in the profiling service
    - slug: profile_service_dump_timers
      info:
        en: |-
          ```hsc
          (profile_service_dump_timers)

          ```
          Dumps the profiling service timers
    - slug: profile_unlock_solo_levels
      info:
        en: |-
          ```hsc
          (profile_unlock_solo_levels)

          ```
          Unlocks all the solo player levels for player 1's profile
    - slug: quit
      info:
        en: |-
          ```hsc
          (quit)

          ```
          Quits the game
    - slug: rasterizer_decals_flush
      info:
        en: |-
          ```hsc
          (rasterizer_decals_flush)

          ```
          Flush all decals
    - slug: rasterizer_fixed_function_ambient
      info:
        en: |-
          ```hsc
          (rasterizer_fixed_function_ambient <long>)
          (rasterizer_fixed_function_ambient 200)
          ```
          Set the ambient light value for fixed function
    - slug: rasterizer_fps_accumulate
      info:
        en: |-
          ```hsc
          (rasterizer_fps_accumulate)

          ```
          Average fps
    - slug: rasterizer_lights_reset_for_new_map
      info:
        en: |
          ```hsc
          (rasterizer_lights_reset_for_new_map)
          ```
    - slug: rasterizer_model_ambient_reflection_tint
      info:
        en: |
          ```hsc
          (rasterizer_model_ambient_reflection_tint <real> <real> <real> <real>)
          ```
    - slug: rasterizer_reload_effects
      info:
        en: |-
          ```hsc
          (rasterizer_reload_effects)

          ```
          Check for shader changes
    - slug: recording_kill
      info:
        en: |-
          ```hsc
          (recording_kill <unit>)
          (recording_kill (player0))
          ```
          Kill the specified unit's cutscene recording
    - slug: recording_play
      info:
        en: |-
          ```hsc
          (recording_play <unit> <cutscene_recording>)
          ```
          Make the specified unit run the specified cutscene recording
    - slug: recording_play_and_delete
      info:
        en: >-
          ```hsc

          (recording_play_and_delete <unit> <cutscene_recording>)

          ```

          Make the specified unit run the specified cutscene recording, deletes
          the unit when the animation finishes
    - slug: recording_play_and_hover
      info:
        en: >-
          ```hsc

          (recording_play_and_hover <vehicle> <cutscene_recording>)

          ```

          Make the specified vehicle run the specified cutscene recording,
          hovers the vehicle when the animation finishes
    - slug: recording_time
      info:
        en: |-
          ```hsc
          (recording_time <unit>)
          (recording_time (player0))
          ```
          Return the time remaining in the specified unit's cutscene recording
    - slug: render_effects
      info:
        en: |-
          ```hsc
          (render_effects <boolean>)
          (render_effects true)
          (render_effects false)
          ```
          Render game effects if `true`
    - slug: render_lights
      info:
        en: |-
          ```hsc
          (render_lights <boolean>)
          (render_lights true)
          (render_lights false)
          ```
          Enables/disables dynamic lights
    - slug: scenery_animation_start
      info:
        en: |-
          ```hsc
          (scenery_animation_start <scenery> <animation_graph> <string>)
          (scenery_animation_start fighter_clouds "cinematics\animations\h_fighter\x70\x70" "x70_3")
          ```
          Starts a custom animation playing on a piece of scenery.
    - slug: scenery_animation_start_at_frame
      info:
        en: |-
          ```hsc
          (scenery_animation_start_at_frame <scenery> <animation_graph> <string> <short>)
          (scenery_animation_start_at_frame fighter_launch "cinematics\animations\h_fighter\x70\x70" "x70_2" 100)
          ```
          Starts a custom animation playing on a piece of scenery at a specific frame.
    - slug: scenery_get_animation_time
      info:
        en: |-
          ```hsc
          (scenery_get_animation_time <scenery>)
          (scenery_get_animation_time fighter_launch)
          ```
          Returns the number of ticks/frames remaining in a custom animation
          (or zero, if the animation is over). This function intentionally returns
          a value **2 frames lower** than the actual remaining frame count so scripts
          waiting for the animation to end can do something before it's over.
    - slug: script_recompile
      info:
        en: |-
          ```hsc
          (script_recompile)

          ```
          Recompiles scripts
    - slug: script_screen_effect_set_value
      info:
        en: |-
          ```hsc
          (script_screen_effect_set_value <short> <real>)
          ```
          Sets a screen effect script value
    - slug: set_digital_forward_throttle
      info:
        en: |-
          ```hsc
          (set_digital_forward_throttle <short> <real>)
          ```
          Sets the amount of forward throttle applied by digital device stimuli
    - slug: set_digital_pitch_increment
      info:
        en: |-
          ```hsc
          (set_digital_pitch_increment <short> <real>)
          ```
          Sets the increment in pitch applied by digital device stimuli
    - slug: set_digital_strafe_throttle
      info:
        en: |-
          ```hsc
          (set_digital_strafe_throttle <short> <real>)
          ```
          Sets the amount of strafe throttle applied by digital device stimuli
    - slug: set_digital_yaw_increment
      info:
        en: |-
          ```hsc
          (set_digital_yaw_increment <short> <real>)
          ```
          Sets the increment in yaw applied by digital device stimuli
    - slug: set_gamepad_forward_threshold
      info:
        en: >-
          ```hsc

          (set_gamepad_forward_threshold <short> <real>)

          ```

          Sets the threshold beyond which gamepad movement is full forward
          throttle
    - slug: set_gamepad_pitch_scale
      info:
        en: |-
          ```hsc
          (set_gamepad_pitch_scale <short> <real>)
          ```
          Sets the scale for gamepad control of pitch
    - slug: set_gamepad_strafe_threshold
      info:
        en: >-
          ```hsc

          (set_gamepad_strafe_threshold <short> <real>)

          ```

          Sets the threshold beyond which gamepad movement is full strafe
          throttle
    - slug: set_gamepad_yaw_scale
      info:
        en: |-
          ```hsc
          (set_gamepad_yaw_scale <short> <real>)
          ```
          Sets the scale for gamepad control of yaw
    - slug: set_gamma
      info:
        en: |-
          ```hsc
          (set_gamma <long>)
          (set_gamma 200)
          ```
          Set the gamma
    - slug: set_mouse_forward_threshold
      info:
        en: >-
          ```hsc

          (set_mouse_forward_threshold <short> <real>)

          ```

          Sets the threshold beyond which mouse movement is full forward
          throttle
    - slug: set_mouse_pitch_scale
      info:
        en: |-
          ```hsc
          (set_mouse_pitch_scale <short> <real>)
          ```
          Sets the scale for mouse control of pitch
    - slug: set_mouse_strafe_threshold
      info:
        en: |-
          ```hsc
          (set_mouse_strafe_threshold <short> <real>)
          ```
          Sets the threshold beyond which mouse movement is full strafe throttle
    - slug: set_mouse_yaw_scale
      info:
        en: |-
          ```hsc
          (set_mouse_yaw_scale <short> <real>)
          ```
          Sets the scale for mouse control of yaw
    - slug: set_pitch_rate
      info:
        en: |-
          ```hsc
          (set_pitch_rate <short> <real>)
          ```
          Sets the yaw rate for the given player number
    - slug: set_yaw_rate
      info:
        en: |-
          ```hsc
          (set_yaw_rate <short> <real>)
          ```
          Sets the yaw rate for the given player number
    - slug: show_hud
      info:
        en: |-
          ```hsc
          (show_hud <boolean>)
          (show_hud true)
          (show_hud false)
          ```
          Shows or hides the hud
    - slug: show_hud_help_text
      info:
        en: |-
          ```hsc
          (show_hud_help_text <boolean>)
          (show_hud_help_text true)
          (show_hud_help_text false)
          ```
          Shows or hides the hud help text
    - slug: show_hud_timer
      info:
        en: |-
          ```hsc
          (show_hud_timer <boolean>)
          (show_hud_timer true)
          (show_hud_timer false)
          ```
          Displays the hud timer
    - slug: show_player_update_stats
      info:
        en: |-
          ```hsc
          (show_player_update_stats)

          ```
          Shows update history playback stats
    - slug: sound_cache_dump_to_file
      info:
        en: |
          ```hsc
          (sound_cache_dump_to_file)

          ```
    - slug: sound_cache_flush
      info:
        en: |
          ```hsc
          (sound_cache_flush)

          ```
    - slug: sound_class_set_gain
      info:
        en: >-
          ```hsc

          (sound_class_set_gain <string> <real> <short>)

          ```

          Changes the gain on the specified sound class(es) to the specified
          game over the specified number of ticks.
    - slug: sound_eax_enabled
      info:
        en: |-
          ```hsc
          (sound_eax_enabled)

          ```
          Returns true if EAX extensions are enabled
    - slug: sound_enable
      info:
        en: |-
          ```hsc
          (sound_enable <boolean>)
          (sound_enable true)
          (sound_enable false)
          ```
          Enables or disables all sound
    - slug: sound_enable_eax
      info:
        en: |-
          ```hsc
          (sound_enable_eax <boolean>)
          (sound_enable_eax true)
          (sound_enable_eax false)
          ```
          Enable or disable EAX extensions
    - slug: sound_enable_hardware
      info:
        en: |-
          ```hsc
          (sound_enable_hardware <boolean> <boolean>)
          ```
          Enable or disable hardware sound buffers
    - slug: sound_get_effects_gain
      info:
        en: |-
          ```hsc
          (sound_get_effects_gain)

          ```
          Returns the game's effects gain
    - slug: sound_get_gain
      info:
        en: |-
          ```hsc
          (sound_get_gain <string>)
          ```
          Absolutely do not use this either
    - slug: sound_get_master_gain
      info:
        en: |-
          ```hsc
          (sound_get_master_gain)

          ```
          Returns the game's master gain
    - slug: sound_get_music_gain
      info:
        en: |-
          ```hsc
          (sound_get_music_gain)

          ```
          Returns the game's music gain
    - slug: sound_get_supplementary_buffers
      info:
        en: |-
          ```hsc
          (sound_get_supplementary_buffers)

          ```
          Get the amount of supplementary buffers
    - slug: sound_impulse_predict
      info:
        en: |-
          ```hsc
          (sound_impulse_predict <sound> <boolean>)
          (sound_impulse_predict "sound\sfx\impulse\ting\ting" true)
          (sound_impulse_predict "sound\sfx\impulse\ting\ting" false)
          ```
          Loads an impulse sound into the sound cache ready for playback
    - slug: sound_impulse_start
      info:
        en: >-
          ```hsc

          (sound_impulse_start <sound> <object> <real>)

          ```

          Plays an impulse sound from the specified source object (or "none"),
          with the specified scale
    - slug: sound_impulse_stop
      info:
        en: |-
          ```hsc
          (sound_impulse_stop <sound>)
          ```
          Stops the specified impulse sound
    - slug: sound_impulse_time
      info:
        en: |-
          ```hsc
          (sound_impulse_time <sound>)
          ```
          Returns the time remaining for the specified impulse sound
    - slug: sound_looping_predict
      info:
        en: |
          ```hsc
          (sound_looping_predict <looping_sound>)
          ```
    - slug: sound_looping_set_alternate
      info:
        en: >-
          ```hsc

          (sound_looping_set_alternate <looping_sound> <boolean>)

          ```

          Enables or disables the alternate loop/alternate end for a looping
          sound
    - slug: sound_looping_set_scale
      info:
        en: >-
          ```hsc

          (sound_looping_set_scale <looping_sound> <real>)

          ```

          Changes the scale of the sound (which should affect the volume) within
          the range 0 to 1
    - slug: sound_looping_start
      info:
        en: >-
          ```hsc

          (sound_looping_start <looping_sound> <object> <real>)

          ```

          Plays a looping sound from the specified source object (or "none"),
          with the specified scale
    - slug: sound_looping_stop
      info:
        en: |-
          ```hsc
          (sound_looping_stop <looping_sound>)
          ```
          Stops the specified looping sound
    - slug: sound_set_effects_gain
      info:
        en: |-
          ```hsc
          (sound_set_effects_gain <real>)
          (sound_set_effects_gain 2.0)
          ```
          Set the game's effects gain
    - slug: sound_set_env
      info:
        en: |-
          ```hsc
          (sound_set_env <short>)
          (sound_set_env 1)
          ```
          Change environment preset
    - slug: sound_set_factor
      info:
        en: |-
          ```hsc
          (sound_set_factor <real>)
          ```
          Set the DSound factor value
    - slug: sound_set_gain
      info:
        en: |-
          ```hsc
          (sound_set_gain <string> <real>)
          ```
          Absolutely do not use this
    - slug: sound_set_master_gain
      info:
        en: |-
          ```hsc
          (sound_set_master_gain <real>)
          (sound_set_master_gain 0.5)
          ```
          Set the game's master gain
    - slug: sound_set_music_gain
      info:
        en: |-
          ```hsc
          (sound_set_music_gain <real>)
          (sound_set_music_gain 3.0)
          ```
          Set the game's music gain
    - slug: sound_set_rolloff
      info:
        en: |-
          ```hsc
          (sound_set_rolloff <real>)
          ```
          Set the DSound rolloff value
    - slug: sound_set_supplementary_buffers
      info:
        en: |-
          ```hsc
          (sound_set_supplementary_buffers <short> <boolean>)
          ```
          Set the amount of supplementary buffers
    - slug: structure_bsp_index
      info:
        en: |-
          ```hsc
          (structure_bsp_index)

          ```
          Returns the current structure bsp index
    - slug: structure_lens_flares_place
      info:
        en: |-
          ```hsc
          (structure_lens_flares_place)

          ```
          Places lens flares in the structure bsp
    - slug: sv_ban
      info:
        en: >-
          ```hsc

          (sv_ban <player index or name> [duration(m,h,d)])

          ```

          **(Server Only)** The given player is kicked and added to
          `banned.txt`. Use `sv_players` to find the player's index. You can
          also specify an optional duration for timed ban. Use 0 to follow
          `sv_ban_penalty` rules.
    - slug: sv_banlist
      info:
        en: |-
          ```hsc
          (sv_banlist)

          ```
          Print a list of banned players
    - slug: sv_end_game
      info:
        en: |-
          ```hsc
          (sv_end_game)

          ```
          End the current game
    - slug: sv_kick
      info:
        en: |-
          ```hsc
          (sv_kick <player index or name>)
          (sv_kick "Micro$oft")
          ```
          **(Server Only)** Kicks the specified player from the server
    - slug: sv_map
      info:
        en: >-
          ```hsc

          (sv_map <string> <string>)

          (sv_map bloodgulch slayer)

          ```

          **(Server Only)** Usage: `sv_map <mapname> <variantname>` <br/> Aborts
          the current game and playlist, and starts the specified game mode on
          the specified map.
    - slug: sv_map_next
      info:
        en: >-
          ```hsc

          (sv_map_next)


          ```

          **(Server Only)** Abort the current game and begin the next game in
          the playlist
    - slug: sv_map_reset
      info:
        en: |-
          ```hsc
          (sv_map_reset)

          ```
          **(Server Only)** Reset the current game
    - slug: sv_mapcycle
      info:
        en: |-
          ```hsc
          (sv_mapcycle)

          ```
          Print the contents of the currently loaded mapcycle file
    - slug: sv_mapcycle_add
      info:
        en: >-
          ```hsc

          (sv_mapcycle_add <string> <string>)

          ```

          Usage: `sv_mapcycle_add <mapname> <variantname>` <br/> Add a new game
          to the end of the mapcycle file
    - slug: sv_mapcycle_begin
      info:
        en: |-
          ```hsc
          (sv_mapcycle_begin)

          ```
          Restart or begin playing the currently loaded mapcycle file
    - slug: sv_mapcycle_del
      info:
        en: >-
          ```hsc

          (sv_mapcycle_del <long>)

          ```

          Usage: `sv_mapcycle_del <index>` <br/> Removes the game at `<index>`.
          Will not affect running games.
    - slug: sv_maxplayers
      info:
        en: >-
          ```hsc

          (sv_maxplayers [short])

          (sv_maxplayers 10)

          ```

          Sets the maximum number of players (between 1 and 16). If no value is
          given, displays the current value.
    - slug: sv_name
      info:
        en: >-
          ```hsc

          (sv_name [name])

          (sv_name)

          (sv_name "yousuck")

          ```

          Sets the name of the server. If no name is given, displays the current
          name.
    - slug: sv_parameters_dump
      info:
        en: |-
          ```hsc
          (sv_parameters_dump)

          ```
          Dumps out the local parameter configuration to `parameters.cfg` file
    - slug: sv_parameters_reload
      info:
        en: |-
          ```hsc
          (sv_parameters_reload)

          ```
          **(Server Only)** Reloads the `parameters.cfg` file
    - slug: sv_password
      info:
        en: >-
          ```hsc

          (sv_password [password])

          (sv_password)

          (sv_password "1234")

          ```

          Sets the server password. If no password is given, displays the
          current password.
    - slug: sv_players
      info:
        en: >-
          ```hsc

          (sv_players)


          ```

          **(Server Only)** Prints (*not* returns) a list of players in the
          current game
    - slug: sv_status
      info:
        en: |-
          ```hsc
          (sv_status)

          ```
          Shows status of the server
    - slug: sv_unban
      info:
        en: >-
          ```hsc

          (sv_unban <long>)

          (sv_unban 1)

          ```

          **(Server Only)** Usage: `sv_unban <index>` <br/> Removes player at
          index in the banlist. Use `sv_banlist` to find the index.
    - slug: switch_bsp
      info:
        en: |-
          ```hsc
          (switch_bsp <short>)
          (switch_bsp 0)
          ```
          Switches to a different structure bsp
    - slug: texture_cache_flush
      info:
        en: |-
          ```hsc
          (texture_cache_flush)

          ```
          Don't make me kick your ass
    - slug: time_code_reset
      info:
        en: |-
          ```hsc
          (time_code_reset)

          ```
          Resets the time code timer
    - slug: time_code_show
      info:
        en: |-
          ```hsc
          (time_code_show <boolean>)
          (time_code_show true)
          (time_code_show false)
          ```
          Shows the time code timer
    - slug: time_code_start
      info:
        en: |-
          ```hsc
          (time_code_start <boolean>)
          (time_code_start true)
          (time_code_start false)
          ```
          Starts/stops the time code timer
    - slug: ui_widget_show_path
      info:
        en: |
          ```hsc
          (ui_widget_show_path <boolean>)
          (ui_widget_show_path true)
          (ui_widget_show_path false)
          ```
    - slug: unbind
      info:
        en: |-
          ```hsc
          (unbind <string> <string>)
          ```
          Unbinds an input device/button combination
    - slug: unit
      info:
        en: |-
          ```hsc
          (unit <object>)
          (unit (list_get (players) 0))
          ```
          Converts an object to a unit
    - slug: unit_aim_without_turning
      info:
        en: |-
          ```hsc
          (unit_aim_without_turning <unit> <boolean>)
          ```
          Allows a unit to aim in place without turning
    - slug: unit_can_blink
      info:
        en: |-
          ```hsc
          (unit_can_blink <unit> <boolean>)
          ```
          Allows a unit to blink or not (units never blink when they are dead)
    - slug: unit_close
      info:
        en: |-
          ```hsc
          (unit_close <unit>)
          ```
          Closes the hatches on a given unit
    - slug: unit_custom_animation_at_frame
      info:
        en: >-
          ```hsc

          (unit_custom_animation_at_frame <unit> <animation_graph> <string>
          <boolean> <short>)

          ```

          Starts a custom animation playing on a unit at a specific frame index
          (interpolates into animation if next to last parameter is `true`).
    - slug: unit_doesnt_drop_items
      info:
        en: >-
          ```hsc

          (unit_doesnt_drop_items <object_list>)

          (unit_doesnt_drop_items (players))

          ```

          Prevents any of the given units from dropping weapons or grenades when
          they die
    - slug: unit_enter_vehicle
      info:
        en: |-
          ```hsc
          (unit_enter_vehicle <unit> <vehicle> <string>)
          (unit_enter_vehicle (player0) warthog_mp_2 "gunner")
          ```
          Puts the specified unit in the specified vehicle (in the named seat)
    - slug: unit_exit_vehicle
      info:
        en: |-
          ```hsc
          (unit_exit_vehicle <unit>)
          ```
          Makes a unit exit its vehicle
    - slug: unit_get_current_flashlight_state
      info:
        en: |-
          ```hsc
          (unit_get_current_flashlight_state <unit>)
          (unit_get_current_flashlight_state (player0))
          ```
          Gets the unit's current flashlight state
    - slug: unit_get_custom_animation_time
      info:
        en: |-
          ```hsc
          (unit_get_custom_animation_time <unit>)
          (unit_get_custom_animation_time chief_insertion)
          ```
          Returns the number of ticks remaining in a unit's custom animation
          (or zero, if the animation is over). This function intentionally returns
          a value **2 frames lower** than the actual remaining frame count so scripts
          waiting for the animation to end can do something before it's over.
    - slug: unit_get_health
      info:
        en: >-
          ```hsc

          (unit_get_health <unit>)

          (unit_get_health (player0))

          ```

          Returns the health of the given unit as a `real` between 0 and 1].
          Returns -1 if the unit does not exist.
    - slug: unit_get_shield
      info:
        en: >-
          ```hsc

          (unit_get_shield <unit>)

          (unit_get_shield (player0))

          ```

          Returns the shield of the given unit as a `real` between 0 and 1.
          Returns -1 if the unit does not exist.
    - slug: unit_get_total_grenade_count
      info:
        en: >-
          ```hsc

          (unit_get_total_grenade_count <unit>)

          (unit_get_total_grenade_count (player0))

          ```

          Returns the total number of grenades for the given unit, or 0 if the
          unit does not exist.
    - slug: unit_has_weapon
      info:
        en: >-
          ```hsc

          (unit_has_weapon <unit> <object_definition>)

          (unit_has_weapon (player0) plasma_cannon)

          ```

          Returns `true` if the <unit> has <object> as a weapon, `false`
          otherwise
    - slug: unit_has_weapon_readied
      info:
        en: >-
          ```hsc

          (unit_has_weapon_readied <unit> <object_definition>)

          (unit_has_weapon_readied (player0) plasma_cannon)

          ```

          Returns `true` if the <unit> has <object> as the primary weapon,
          `false` otherwise
    - slug: unit_impervious
      info:
        en: >-
          ```hsc

          (unit_impervious <object_list> <boolean>)

          (unit_impervious (players) true)

          (unit_impervious (players) false)

          ```

          Prevents any of the given units from being knocked around or playing
          ping animations
    - slug: unit_is_playing_custom_animation
      info:
        en: |-
          ```hsc
          (unit_is_playing_custom_animation <unit>)
          ```
          Returns `true` if the given unit is still playing a custom animation
    - slug: unit_kill
      info:
        en: |-
          ```hsc
          (unit_kill <unit>)
          ```
          Kills a given unit, no saving throw
    - slug: unit_kill_silent
      info:
        en: >-
          ```hsc

          (unit_kill_silent <unit>)

          ```

          Kills a given unit silently (doesn't make them play their normal death
          animation or sound)
    - slug: unit_open
      info:
        en: |-
          ```hsc
          (unit_open <unit>)
          ```
          Opens the hatches on the given unit
    - slug: unit_set_current_vitality
      info:
        en: |-
          ```hsc
          (unit_set_current_vitality <unit> <real> <real>)
          ```
          Sets a unit's current body and shield vitality
    - slug: unit_set_desired_flashlight_state
      info:
        en: |-
          ```hsc
          (unit_set_desired_flashlight_state <unit> <boolean>)
          (unit_set_desired_flashlight_state (player0) true)
          (unit_set_desired_flashlight_state (player0) false)
          ```
          Turns the unit's flashlight on or off
    - slug: unit_set_emotion
      info:
        en: >-
          ```hsc

          (unit_set_emotion <unit> <short>)

          ```

          Sets a unit's facial expression (-1 is none, other values depend on
          unit)
    - slug: unit_set_emotion_animation
      info:
        en: |-
          ```hsc
          (unit_set_emotion_animation <unit> <string>)
          ```
          Sets the emotion animation to be used for the given unit
    - slug: unit_set_enterable_by_player
      info:
        en: |-
          ```hsc
          (unit_set_enterable_by_player <unit> <boolean>)
          (unit_set_enterable_by_player warthog_mp_3 true)
          (unit_set_enterable_by_player warthog_mp_3 false)
          ```
          Can be used to prevent the player from entering a vehicle
    - slug: unit_set_maximum_vitality
      info:
        en: |-
          ```hsc
          (unit_set_maximum_vitality <unit> <real> <real>)
          ```
          Sets a unit's maximum body and shield vitality
    - slug: unit_set_seat
      info:
        en: |-
          ```hsc
          (unit_set_seat <unit> <string>)
          (unit_set_seat (player0) "driver")
          ```
          This unit will assume the named seat
    - slug: unit_solo_player_integrated_night_vision_is_active
      info:
        en: >-
          ```hsc

          (unit_solo_player_integrated_night_vision_is_active)


          ```

          Returns whether the night-vision mode could be activated via the
          flashlight button
    - slug: unit_stop_custom_animation
      info:
        en: |-
          ```hsc
          (unit_stop_custom_animation <unit>)
          ```
          Stops the custom animation running on the given unit
    - slug: unit_suspended
      info:
        en: |-
          ```hsc
          (unit_suspended <unit> <boolean>)
          (unit_suspended (player0) true)
          (unit_suspended (player0) false)
          ```
          Stops gravity from working on the given unit
    - slug: units_set_current_vitality
      info:
        en: |-
          ```hsc
          (units_set_current_vitality <object_list> <real> <real>)
          (units_set_current_vitality (players) 75 75)
          ```
          Sets a group of units' current body and shield vitality
    - slug: units_set_desired_flashlight_state
      info:
        en: |-
          ```hsc
          (units_set_desired_flashlight_state <object_list> <boolean>)
          (units_set_desired_flashlight_state (players) true)
          (units_set_desired_flashlight_state (players) false)
          ```
          Sets the units' desired flashlight state
    - slug: units_set_maximum_vitality
      info:
        en: |-
          ```hsc
          (units_set_maximum_vitality <object_list> <real> <real>)
          (units_set_maximum_vitality (players) 75 75)
          ```
          Sets a group of units' maximum body and shield vitality
    - slug: vehicle_driver
      info:
        en: |-
          ```hsc
          (vehicle_driver <unit>)
          (vehicle_driver the_ghost)
          ```
          Returns the driver of a vehicle
    - slug: vehicle_gunner
      info:
        en: |-
          ```hsc
          (vehicle_gunner <unit>)
          (vehicle_gunner the_warthog)
          ```
          Returns the gunner of a vehicle
    - slug: vehicle_hover
      info:
        en: >-
          ```hsc

          (vehicle_hover <vehicle> <boolean>)

          (vehicle_hover "vehicles\warthog\warthog" true)

          (vehicle_hover "vehicles\warthog\warthog" false)

          ```

          Stops the vehicle from running real physics and runs fake hovering
          physics instead
    - slug: vehicle_load_magic
      info:
        en: >-
          ```hsc

          (vehicle_load_magic <unit> <string> <object_list>)

          (vehicle_load_magic pelican_1 "" (players))

          ```

          Makes a list of units (named or by encounter) magically get into a
          vehicle, in the substring-specified seats (e.g. "CD-passenger". Empty
          string matches all seats).
    - slug: vehicle_riders
      info:
        en: |-
          ```hsc
          (vehicle_riders <unit>)
          (vehicle_riders the_tanks)
          ```
          Returns a list of all riders in a vehicle
    - slug: vehicle_test_seat
      info:
        en: |-
          ```hsc
          (vehicle_test_seat <vehicle> <string> <unit>)
          (vehicle_test_seat banshee_mp_1 "driver" (player0))
          ```
          Tests whether the named seat has a specified unit in it
    - slug: vehicle_test_seat_list
      info:
        en: |-
          ```hsc
          (vehicle_test_seat_list <vehicle> <string> <object_list>)
          (vehicle_test_seat_list ghost_mp_2 "driver" (players))
          ```
          Tests whether the named seat has an object in the object list
    - slug: vehicle_unload
      info:
        en: >-
          ```hsc

          (vehicle_unload <unit> <string>)

          (vehicle_unload hog w-driver)

          ```

          Makes units get out of a vehicle from the substring-specified seats
          (e.g. "CD-passenger". Empty string matches all seats).
    - slug: version
      info:
        en: |-
          ```hsc
          (version)

          ```
          Prints the build version
    - slug: volume_teleport_players_not_inside
      info:
        en: >-
          ```hsc

          (volume_teleport_players_not_inside <trigger_volume> <cutscene_flag>)

          (volume_teleport_players_not_inside hidden_trigger omgtelprot)

          ```

          Moves all players outside a specified trigger volume to a specified
          flag
    - slug: volume_test_object
      info:
        en: |-
          ```hsc
          (volume_test_object <trigger_volume> <object>)
          (volume_test_object trig_volume1 (player0))
          ```
          Returns `true` if the specified object is within the specified volume
    - slug: volume_test_objects
      info:
        en: >-
          ```hsc

          (volume_test_objects <trigger_volume> <object_list>)

          (volume_test_objects trig_volume2 (players))

          ```

          Returns `true` if any of the specified objects are within the
          specified volume
    - slug: volume_test_objects_all
      info:
        en: >-
          ```hsc

          (volume_test_objects_all <trigger_volume> <object_list>)

          (volume_test_objects_all trig_volume2 (players))

          ```

          Returns `true` if all of the specified objects are within the
          specified volume
