ScriptTypes:
  columns:
    - key: type
      name:
        en: Type
        es: Tipo
      format: code
    - key: info
      name:
        en: Comments
        es: Comentarios
      format: text
    - key: ex
      name:
        en: Example
        es: Ejemplo
      format: codeblock-hsc
  rows:
    - type: continuous
      info:
        en: Runs every tick
        es: 
      ex: (script continuous check_player_health)

    - type: dormant
      info:
        en: >
          Sleeps until started with `wake`, runs until there are no instructions
          left, then stops. Calling `wake` a second time will not restart the
          script.
        es: 
      ex: (script dormant wait_for_it)

    - type: startup
      info:
        en: Performed only on map startup.
        es: 
      ex: (script startup init_things)

    - type: static
      info:
        en: Performed when called from another script.
        es: 
      ex: (script static unit player0)

    - type: stub
      info:
        en: >
          A `stub` script by itself does nothing. It allows you to pre-declare a
          `static` script without providing a script body.
          This allows other scripts to invoke a `static` script without the full
          function body being declared yet.
          <br/><br/>
          The script you override a `stub` with must have the same "signature" (
          i.e. name, parameters, and return type). A stub cannot be declared more
          than once. The full implementation of a `stub` *may* be placed in
          another script file.
          <br/><br/>
          If you're familiar with C function prototypes, this is very similar.
        es: 
      ex: (script stub object player0)

ValueTypes:
  columns:
    - key: type
      name:
        en: Type
        es: Tipo
      format: code
    - key: info
      name:
        en: Details
        es: 
      format: text
    - key: ex
      name:
        en: Example
        es: Ejemplo
      format: text
  rows:
    - type: boolean
      info:
        en: A value that is true or false
        es: 
      ex: true <br/> false

    - type: real
      info:
        en: 'Floating point (decimal) value <br/> Value Range: 3.4E +/- 38 (6 digits)'
        es: 
      ex: '3.000000'

    - type: short
      info:
        en: 'Short integer value <br/> Value Range: +/- 32,767'
        es: 
      ex: '2'

    - type: long
      info:
        en: 'Long integer value <br/> Value Range: +/- 2,147,483,648'
        es: 
      ex: '2000000000'

    - type: string
      info:
        en: >
          String of characters in double quotes <br/> Max number of characters: 32
        es: 
      ex: '"This is a string."'

    - type: trigger_volume
      info:
        en: A "Trigger Volumes" value (a block in the [scenario][] tag)
        es: 
      ex:

    - type: cutscene_flag
      info:
        en: A "Cutscene Flags" value (a block in the [scenario][] tag)
        es: 
      ex:

    - type: cutscene_camera_point
      info:
        en: A "Cutscene Camera Points" value (a block in the [scenario][] tag)
        es: 
      ex:

    - type: cutscene_title
      info:
        en: A "Cutscene Titles" value (a block in the [scenario][] tag)
        es: 
      ex:

    - type: cutscene_recording
      info:
        en: >
          A "Cutscene Recording" value that isn't in the public HaloCE
          [scenario][] tag?
        es: 
      ex:

    - type: device_group
      info:
        en: A "Device Groups" value (a block in the [scenario][] tag)
        es: 
      ex:

    - type: ai
      info:
        en: An "Encounters" value
        es: 
      ex:

    - type: ai_command_list
      info:
        en: A "Command Lists" value (a block in the [scenario][] tag)
        es: 
      ex:

    - type: starting_profile
      info:
        en: A "Player Starting Profile" value (a block in the [scenario][] tag)
        es: 
      ex:

    - type: conversation
      info:
        en: A "AI Conversations" value (a block in the [scenario][] tag)
        es: 
      ex:

    - type: navpoint
      info:
        en: 
        es: 
      ex:

    - type: hud_message
      info:
        en: '[HUD message text][hud_message_text]'
        es: 
      ex:

    - type: object_list
      info:
        en: An object list
        es: 
      ex:

    - type: sound
      info:
        en: '[Sound][]'
        es: 
      ex:

    - type: effect
      info:
        en: '[Effect][]'
        es: 
      ex:

    - type: damage
      info:
        en: '[Damage Effect][damage_effect]'
        es: 
      ex:

    - type: looping_sound
      info:
        en: '[Sound Looping][sound_looping]'
        es: 
      ex:

    - type: animation_graph
      info:
        en: '[Model Animations][model_animations]'
        es: 
      ex:

    - type: actor_variant
      info:
        en: '[Actor variant][actor_variant]'
        es: 
      ex:

    - type: damage_effect
      info:
        en: '[Damage Effect][damage_effect]'
        es: 
      ex:

    - type: object_definition
      info:
        en: 
        es: 
      ex:

    - type: game_difficulty
      info:
        en: easy <br/> normal <br/> hard <br/> impossible
        es: 
      ex:

    - type: team
      info:
        en: player <br/> human <br/> covenant <br/> flood <br/> sentinal
        es: 
      ex:

    - type: ai_default_state
      info:
        en: >
          none <br/> sleeping <br/> alert <br/> moving <br/> guarding <br/>
          searching <br/> fleeing
        es: 
      ex:

    - type: actor_type
      info:
        en: ie, elite
        es: 
      ex:

    - type: hud_corner
      info:
        en: top_left <br/> top_right <br/> bottom_left <br/> bottom_right
        es: 
      ex:

    - type: object
      info:
        en: '[Object][]'
        es: 
      ex:

    - type: unit
      info:
        en: '[Unit][]'
        es: 
      ex:

    - type: vehicle
      info:
        en: '[Vehicle][]'
        es: 
      ex:

    - type: weapon
      info:
        en: '[Weapon][]'
        es: 
      ex:

    - type: device
      info:
        en: '[Device][]'
        es: 
      ex:

    - type: scenery
      info:
        en: '[Scenery][]'
        es: 
      ex:

    - type: object_name
      info:
        en: An "Object Names" value (a block in the [scenario][] tag)
        es: 
      ex:

    - type: unit_name
      info:
        en: A "Bipeds" value (a block in the [scenario][] tag)
        es: 
      ex:

    - type: vehicle_name
      info:
        en: A "Vehicles" value (a block in the [scenario][] tag)
        es: 
      ex:

    - type: weapon_name
      info:
        en: A "Weapons" value (a block in the [scenario][] tag)
        es: 
      ex:

    - type: device_name
      info:
        en: A "Device" value (a block in the [scenario][] tag)
        es: 
      ex:

    - type: scenery_name
      info:
        en: A "Scenery" value (a block in the [scenario][] tag)
        es: 
      ex:

OperatorsAndKeywords:
  columns:
    - key: type
      name:
        en: Expression
        es: 
      format: code
    - key: info
      name:
        en: Details
        es: 
      format: text
    - key: ex
      name:
        en: Example
        es: Ejemplo
      format: text
  rows:
    - type: (+ <number_1> <number_2> [... <number_n>])
      info:
        en: Returns the sum of all specified expressions
        es: 
      ex: '`(+ 5 6 7 8 9)` returns: 35'

    - type: (- <number_1> <number_2>)
      info:
        en: Returns the difference of two expressions
        es: 
      ex: '`(- 10 5)` returns: 5'

    - type: (* <number_1> <number_2> [... <number_n>])
      info:
        en: Returns the product of all specified expressions
        es: 
      ex: '`(* 5 5)` returns: 25 <br/> `(* 5.5 6)` returns: 33'

    - type: (/ <number_1> <number_2>)
      info:
        en: Returns the quotient of two expressions
        es: 
      ex: '`(/ 10 5)`  returns: 2 <br/> `(/ 2.5 2)` returns: 1.25'

    - type: (= <expression_1> <expression_2>)
      info:
        en: Returns true if two expressions are equal
        es: 
      ex: '`(= (hud_get_timer_ticks) 0)`'

    - type: (!= <expression_1> <expression_2>)
      info:
        en: Returns true if two expressions are not equal
        es: 
      ex: '`(!= (hud_get_timer_ticks) 0)`'

    - type: (> <number_1> <number_2>)
      info:
        en: Returns true if `number_1` is larger than `number_2`
        es: 
      ex: '`(> 10 5)` returns: true <br/> `(> 5 10)` returns: false'

    - type: (< <number_1> <number_2>)
      info:
        en: Returns true if `number_1` is smaller than `number_2`
        es: 
      ex: '`(> 4 8)` returns: true <br/> `(> 8 4)` returns: false'

    - type: (>= <number_1> <number_2>)
      info:
        en: Returns true if `number_1` is larger than or equal `number_2`
        es: 
      ex: '`(>= 10 10)` returns: true <br/> `(>= 5 10)` returns: false'

    - type: (<= <number_1> <number_2>)
      info:
        en: Returns true if `number_1` is smaller than or equal `number_2`
        es: 
      ex: '`(>= 4 4)` returns: true <br/> `(>= 8 4)` returns: false'

    - type: (and <boolean_1> <boolean_2> [... <boolean_n>])
      info:
        en: Returns true if all specified expressions are true
        es: 
      ex: '`(and (player_action_test_action) true)`'

    - type: (begin <expression_1> <expression_2> [... <expression_n>])
      info:
        en: >
          Returns the last expression in a sequence after evaluating the
          sequence in order
        es: 
      ex: '`(begin something something_else 20)` returns: 20'

    - type: (begin_random <expression_1> <expression_2> [... <expression_n>])
      info:
        en: >
          Evaluates the sequence of expressions in random order and returns the
          last value evaluated
        es: 
      ex: '`(begin_random something something_else 20)`'

    - type: (cond (<boolean_1> <result_1>) [(<boolean_2> <result_2>) [...]])
      info:
        en: Returns the value associated with the first true condition
        es: 
      ex: '`(cond false_val 10 true_val 20)` returns: 20'

    - type: (global <type> <name> <inital value>)
      info:
        en: Makes a new global script variable
        es: 
      ex: '`(global boolean bsl_sucks true)`'

    - type: (if <boolean> <expression> [<else>])
      info:
        en: Returns one of two values based on the value of a condition
        es: 
      ex: '`(if (bsl_sucks) (print "Stop whining."))`'

    - type: (inspect <expression>)
      info:
        en: Prints the value of an expression to the screen for debugging purposes
        es: 
      ex: '`(inspect (+ 3 4))` outputs: 7'

    - type: (min <number_1> <number_2> [... <number_n>])
      info:
        en: Returns the minimum of all specified expressions
        es: 
      ex: '`(min 1 3 2 4 5 7 6 8 9)` returns: 1'

    - type: (max <number_1> <number_2> [... <number_n>])
      info:
        en: Returns the maximum of all specified expressions
        es: 
      ex: '`(max 1 3 2 4 5 7 6 8 9)` returns: 9'

    - type: (not <boolean>)
      info:
        en: Returns the opposite of the expression
        es: 
      ex: '`(not bsl_sucks)` returns: false'

    - type: (or <boolean_1> <boolean_2> [... <boolean_n>])
      info:
        en: Returns true if any specified expressions are true
        es: 
      ex: '`(or (player_action_test_action) true)` returns: true'

    - type: (script <script type> [<return type>] <name>)
      info:
        en: Defines a new script
        es: 
      ex: '[See above example][scripting#basics]'

    - type: (set <variable name> <value>)
      info:
        en: Sets the value of a defined global variable
        es: 
      ex: '`(set bsl_sucks true)`'

    - type: (sleep <short> [<script>])
      info:
        en: >
          Pauses execution of this script (or, optionally, another script) for
          the specified number of ticks (1 tick = 1/30 second)
        es: 
      ex: '`(sleep 30 more_weapons)`'

    - type: (sleep_until <condition> [short_1] [short_2])
      info:
        en: >
          Pauses execution of this script until `condition` is true.
          By default, this checks once per second. If `short_1` is specified, it
          checks every `short_1` ticks instead. By default, this will await the
          condition indefinitely. `short_2` can be used to timeout after a
          certain number of ticks, instead. After the timeout, the script will
          continue on as if `condition` became true.
        es: 
      ex: '`(sleep_until false 5 600)`'

    - type: (wake <script name>)
      info:
        en: Wakes a sleeping or dormant script in the next update
        es: 
      ex: '`(wake more_weapons)`'

    - type: (thread_sleep <long>)
      info:
        en: Sleeps the calling thread for the specified number of ms
        es: 
      ex: '`(thread_sleep 20)` returns: sleeps for 20ms'

Functions:
  columns:
    - key: type
      name:
        en: Expression
        es: 
      format: code
    - key: info
      name:
        en: Details
        es: 
      format: text
    - key: ex
      name:
        en: Usage Example
        es: 
      format: text
  rows:
    - type: (activate_nav_point_flag <navpoint> <unit> <cutscene_flag> <real>)
      info:
        en: >
          Activates a nav point type <string> attached to (local) player <unit>
          anchored to a flag with a vertical offset <real>. If the player is not
          local to the machine, this will fail.
        es: 
      ex: 

    - type: (activate_nav_point_object <navpoint> <unit> <object> <real>)
      info:
        en: >
          Activates a nav point type <string> attached to (local) player <unit>
          anchored to an object with a vertical offset <real>. If the player is
          not local to the machine, this will fail.
        es: 
      ex: 

    - type: (activate_team_nav_point_flag <navpoint> <team> <cutscene_flag> <real>)
      info:
        en: >
          Activates a nav point type <string> attached to a team anchored to a
          flag with a vertical offset <real>. If the player is not local to the
          machine, this will fail.
        es: 
      ex: 

    - type: (activate_team_nav_point_object <navpoint> <team> <object> <real>)
      info:
        en: >
          Activates a nav point type <string> attached to a team anchored to an
          object with a vertical offset <real>. If the player is not local to
          the machine, this will fail.
        es: 
      ex: 

    - type: (ai_actors <ai>)
      info:
        en: Converts an ai reference to an object list
        es: 
      ex: 

    - type: (ai_allegiance <team> <team>)
      info:
        en: Creates an allegiance between two teams
        es: 
      ex: 

    - type: (ai_allegiance_broken <team> <team>)
      info:
        en: >
          Returns whether two teams have an allegiance that is currently broken
          by traitorous behavior
        es: 
      ex: 

    - type: (ai_allegiance_remove <team> <team>)
      info:
        en: Destroys an allegiance between two teams
        es: 
      ex: 

    - type: (ai_allow_charge <ai> <boolean>)
      info:
        en: Either enables or disables charging behavior for a group of actors
        es: 
      ex: 

    - type: (ai_allow_dormant <ai> <boolean>)
      info:
        en: Either enables or disables automatic dormancy for a group of actors
        es: 
      ex: 

    - type: (ai_attach <unit> <ai>)
      info:
        en: Attaches the specified unit to the specified encounter
        es: 
      ex: 

    - type: (ai_attach_free <unit> <actor_variant>)
      info:
        en: Attaches a unit to a newly created free actor of the specified type
        es: 
      ex: 

    - type: (ai_attack <ai>)
      info:
        en: Makes the specified platoon(s) go into the attacking state
        es: 
      ex: 

    - type: (ai_automatic_migration_target <ai> <boolean>)
      info:
        en: Enables or disables a squad as being an automatic migration target
        es: 
      ex: 

    - type: (ai_berserk <ai> <boolean>)
      info:
        en: Forces a group of actors to start or stop berserking
        es: 
      ex: 

    - type: (ai_braindead <ai> <boolean>)
      info:
        en: Makes a group of actors braindead, or restores them to life (in their initial state)
        es: 
      ex: 

    - type: (ai_braindead_by_unit <object_list> <boolean>)
      info:
        en: >
          Makes a list of objects braindead, or restores them to life. If you
          pass in a vehicle index, it makes all actors in that vehicle braindead
          (including any built-in guns).
        es: 
      ex: 

    - type: (ai_command_list <ai> <ai_command_list>)
      info:
        en: Tells a group of actors to begin executing the specified command list
        es: 
      ex: 

    - type: (ai_command_list_advance <ai>)
      info:
        en: >
          Tells a group of actors that are running a command list that they may
          advance further along the list (if they are waiting for a stimulus)
        es: 
      ex: 

    - type: (ai_command_list_advance_by_unit <unit>)
      info:
        en: Just like ai_command_list_advance but operates upon a unit instead
        es: 
      ex: 

    - type: (ai_command_list_by_unit <unit> <ai_command_list>)
      info:
        en: Tells a named unit to begin executing the specified command list
        es: 
      ex: 

    - type: (ai_command_list_status <object_list>)
      info:
        en: >
          Gets the status of a number of units running command lists:
          0 = none, 1 = finished command list, 2 = waiting for stimulus,
          3 = running command list
        es: 
      ex: 

    - type: (ai_conversation <conversation>)
      info:
        en: >
          Tries to add an entry to the list of conversations waiting to play.
          Returns FALSE if the required units could not be found to play the
          conversation, or if the player is too far away and the 'delay' flag is
          not set.
        es: 
      ex: 

    - type: (ai_conversation_advance <conversation>)
      info:
        en: Tells a conversation that it may advance
        es: 
      ex: 

    - type: (ai_conversation_line <conversation>)
      info:
        en: >
          Returns which line the conversation is currently playing, or 999 if
          the conversation is not currently playing.
        es: 
      ex: 

    - type: (ai_conversation_status <conversation>)
      info:
        en: >
          Returns the status of a conversation (0=none, 1=trying to begin,
          2=waiting for guys to get in position, 3=playing, 4=waiting to
          advance, 5=could not begin, 6=finished successfully, 7=aborted midway)
        es: 
      ex: 

    - type: (ai_conversation_stop <conversation>)
      info:
        en: Stops a conversation from playing or trying to play
        es: 
      ex: 

    - type: (ai_debug_communication_focus <string(s)>)
      info:
        en: Focuses (or stops focusing) a set of unit vocalization types
        es: 
      ex: 

    - type: (ai_debug_communication_ignore <string(s)>)
      info:
        en: >
          Ignores (or stops ignoring) a set of AI communication types when
          printing out communications
        es: 
      ex: 

    - type: (ai_debug_communication_suppress <string(s)>)
      info:
        en: Suppresses (or stops suppressing) a set of AI communication types
        es: 
      ex: 

    - type: (ai_debug_sound_point_set)
      info:
        en: Drops the AI debugging sound point at the camera location
        es: 
      ex: '`(ai_debug_sound_point_set)`'

    - type: (ai_debug_speak <string>)
      info:
        en: Makes the currently selected AI speak a vocalization
        es: 
      ex: '`(ai_speak "pain minor")`'

    - type: (ai_debug_speak_list <string>)
      info:
        en: Makes the currently selected AI speak a list of vocalizations
        es: 
      ex: '`(ai_speak_list "involuntary")`'

    - type: (ai_debug_teleport_to <ai>)
      info:
        en: Teleports all players to the specified encounter
        es: 
      ex: 

    - type: (ai_debug_vocalize <string> <string>)
      info:
        en: Makes the selected AI vocalize
        es: 
      ex: 

    - type: (ai_defend <ai>)
      info:
        en: Makes the specified platoon(s) go into the defending state
        es: 
      ex: 

    - type: (ai_deselect)
      info:
        en: Clears the selected encounter
        es: 
      ex: '`(ai_deselect)`'

    - type: (ai_detach <unit>)
      info:
        en: Detaches the specified unit from all AI
        es: 
      ex: 

    - type: (ai_dialogue_triggers <boolean>)
      info:
        en: Turns impromptu dialogue on or off
        es: 
      ex: '`(ai_dialogue_triggers true)` <br/> `(ai_dialogue_triggers false)`'

    - type: (ai_disregard <object_list> <boolean>)
      info:
        en: >
          If true, forces all actors to completely disregard the specified
          units, otherwise lets them acknowledge the units again.
        es: 
      ex: '`(ai_disregard (players) true)` <br/> `(ai_disregard (players) false)`'

    - type: (ai_erase <ai>)
      info:
        en: Erases the specified encounter and/or squad
        es: 
      ex: 

    - type: (ai_erase_all)
      info:
        en: Erases all AI
        es: 
      ex: 

    - type: (ai_exit_vehicle <ai>)
      info:
        en: Tells a group of actors to get out of any vehicles that they are in
        es: 
      ex: 

    - type: (ai_follow_distance <ai> <real>)
      info:
        en: >
          Sets the distance threshold which will cause squads to migrate when
          following someone
        es: 
      ex: 

    - type: (ai_follow_target_ai <ai> <ai>)
      info:
        en: >
          Sets the follow target for an encounter to be a group of AI
          (encounter, squad or platoon)
        es: 
      ex: 

    - type: (ai_follow_target_disable <ai>)
      info:
        en: Turns off following for an encounter
        es: 
      ex: 

    - type: (ai_follow_target_players <ai>)
      info:
        en: Sets the follow target for an encounter to be the closest player
        es: 
      ex: 

    - type: (ai_follow_target_unit <ai> <unit>)
      info:
        en: Sets the follow target for an encounter to be a specific unit
        es: 
      ex: 

    - type: (ai_force_active <ai> <boolean>)
      info:
        en: >
          Forces an encounter to remain active (i.e. not freeze in place) even
          if there are no players nearby
        es: 
      ex: 

    - type: (ai_force_active_by_unit <unit> <boolean>)
      info:
        en: >
          Forces a named actor that is NOT in an encounter to remain active
          (i.e. not freeze in place) even if there are no players nearby
        es: 
      ex: 

    - type: (ai_free <ai>)
      info:
        en: Removes a group of actors from their encounter and sets them free
        es: 
      ex: 

    - type: (ai_free_units <object_list>)
      info:
        en: Removes a set of units from their encounter (if any) and sets them free
        es: 
      ex: 

    - type: (ai_go_to_vehicle <ai> <unit> <string>)
      info:
        en: >
          Tells a group of actors to get into a vehicle, in the
          substring-specified seats (e.g. passenger for pelican). Does not
          interrupt any actors who are already going to vehicles.
        es: 
      ex: 

    - type: (ai_go_to_vehicle_override <ai> <unit> <string>)
      info:
        en: >
          Tells a group of actors to get into a vehicle, in the
          substring-specified seats (e.g. passenger for pelican). Any actors who
          are already going to vehicles will stop and go to this one instead!
        es: 
      ex: 

    - type: (ai_going_to_vehicle <unit>)
      info:
        en: >
          Return the number of actors that are still trying to get into the
          specified vehicle
        es: 
      ex: 

    - type: (ai_grenades <boolean>)
      info:
        en: Turns grenade inventory on or off
        es: 
      ex: 

    - type: (ai_is_attacking <ai>)
      info:
        en: >
          Returns whether a platoon is in the attacking mode (or if an encounter
          is specified, returns whether any platoon in that encounter is attacking)
        es: 
      ex: 

    - type: (ai_kill <ai>)
      info:
        en: Instantly kills the specified encounter and/or squad
        es: 
      ex: 

    - type: (ai_kill_silent <ai>)
      info:
        en: >
          Instantly and silently (no animation or sound played) kills the
          specified encounter and/or squad
        es: 
      ex: 

    - type: (ai_lines)
      info:
        en: Cycles through AI line-spray modes
        es: 
      ex: 

    - type: (ai_link_activation <ai> <ai>)
      info:
        en: >
          Links the first encounter so that it will be made active whenever it
          detects that the second encounter is active
        es: 
      ex: 

    - type: (ai_living_count <ai>)
      info:
        en: Return the number of living actors in the specified encounter and/or squad
        es: 
      ex: 

    - type: (ai_living_fraction <ai>)
      info:
        en: >
          Return the fraction `[0-1]` of living actors in the specified
          encounter and/or squad
        es: 
      ex: 

    - type: (ai_look_at_object <unit> <object>)
      info:
        en: Tells an actor to look at an object until further notice
        es: 
      ex: 

    - type: (ai_magically_see_encounter <ai> <ai>)
      info:
        en: Makes one encounter magically aware of another
        es: 
      ex: 

    - type: (ai_magically_see_players <ai>)
      info:
        en: Makes an encounter magically aware of nearby players
        es: 
      ex: 

    - type: (ai_magically_see_unit <ai> <unit>)
      info:
        en: Makes an encounter magically aware of the specified unit
        es: 
      ex: 

    - type: (ai_maneuver <ai>)
      info:
        en: >
          Makes all squads in the specified platoon(s) maneuver to their
          designated maneuver squads
        es: 
      ex: 

    - type: (ai_maneuver_enable <ai> <boolean>)
      info:
        en: >
          Enables or disables the maneuver/retreat rule for an encounter or
          platoon. The rule will still trigger, but none of the actors will be
          given the order to change squads.
        es: 
      ex: 

    - type: (ai_migrate <ai> <ai>)
      info:
        en: Makes all or part of an encounter move to another encounter
        es: 
      ex: 

    - type: (ai_migrate_and_speak <ai> <ai> <string>)
      info:
        en: >
          Makes all or part of an encounter move to another encounter, and say
          their `advance` or `retreat` speech lines.
        es: 
      ex: 

    - type: (ai_migrate_by_unit <object_list> <ai>)
      info:
        en: Makes a named vehicle or group of units move to another encounter
        es: 
      ex: 

    - type: (ai_nonswarm_count <ai>)
      info:
        en: Return the number of non-swarm actors in the specified encounter and/or squad
        es: 
      ex: 

    - type: (ai_place <ai>)
      info:
        en: Places the specified encounter on the map
        es: 
      ex: 

    - type: (ai_playfight <ai> <boolean>)
      info:
        en: Sets an encounter to be playfighting or not
        es: 
      ex: 

    - type: (ai_prefer_target <object_list> <boolean>)
      info:
        en: >
          If true, *ALL* enemies will prefer to attack the specified units. If
          false, removes the preference.
        es: 
      ex: 

    - type: (ai_reconnect)
      info:
        en: >
          Reconnects all AI information to the current structure bsp (use this
          after you create encounters or command lists in sapien, or place new
          firing points or command list points)
        es: 
      ex: 

    - type: (ai_renew <ai>)
      info:
        en: >
          Refreshes the health and grenade count of a group of actors, so they
          are as good as new
        es: 
      ex: 

    - type: (ai_retreat <ai>)
      info:
        en: >
          Makes all squads in the specified platoon(s) maneuver to their
          designated maneuver squads
        es: 
      ex: 

    - type: (ai_select <ai>)
      info:
        en: Selects the specified encounter
        es: 
      ex: 

    - type: (ai_set_blind <ai> <boolean>)
      info:
        en: Enables or disables sight for actors in the specified encounter
        es: 
      ex: 

    - type: (ai_set_current_state <ai> <ai_default_state>)
      info:
        en: >
          Sets the current state of a group of actors. WARNING: may have
          unpredictable results on actors that are in combat.
        es: 
      ex: 

    - type: (ai_set_deaf <ai> <boolean>)
      info:
        en: Enables or disables hearing for actors in the specified encounter
        es: 
      ex: 

    - type: (ai_set_respawn <ai> <boolean>)
      info:
        en: Enables or disables respawning in the specified encounter
        es: 
      ex: 

    - type: (ai_set_return_state <ai> <ai_default_state>)
      info:
        en: >
          Sets the state that a group of actors will return to when they have
          nothing to do
        es: 
      ex: 

    - type: (ai_set_team <ai> <team>)
      info:
        en: Makes an encounter change to a new team
        es: 
      ex: 

    - type: (ai_spawn_actor <ai>)
      info:
        en: Spawns a single actor in the specified encounter and/or squad
        es: 
      ex: 

    - type: (ai_status <ai>)
      info:
        en: >
          Returns the most severe combat status of a group of actors
          (0=inactive, 1=noncombat, 2=guarding, 3=search/suspicious, 4=definite
          enemy(heard or magic awareness), 5=visible enemy, 6=engaging in combat)
        es: 
      ex: 

    - type: (ai_stop_looking <unit>)
      info:
        en: Tells an actor to stop looking at whatever it's looking at
        es: 
      ex: 

    - type: (ai_strength <ai>)
      info:
        en: >
          Return the current strength (average body vitality from 0-1) of the
          specified encounter and/or squad
        es: 
      ex: 

    - type: (ai_swarm_count <ai>)
      info:
        en: >
          Return the number of swarm actors in the specified encounter and/or
          squad
        es: 
      ex: 

    - type: (ai_teleport_to_starting_location <ai>)
      info:
        en: >
          Teleports a group of actors to the starting locations of their current
          squad(s)
        es: 
      ex: 

    - type: (ai_teleport_to_starting_location_if_unsupported <ai>)
      info:
        en: >
          Teleports a group of actors to the starting locations of their current
          squad(s), only if they are not supported by solid ground (i.e. if they
          are falling after switching BSPs).
        es: 
      ex: 

    - type: (ai_try_to_fight_nothing <ai>)
      info:
        en: Removes the preferential target setting from a group of actors
        es: 
      ex: 

    - type: (ai_try_to_fight <ai> <ai>)
      info:
        en: Causes a group of actors to preferentially target another group of actors
        es: 
      ex: 

    - type: (ai_try_to_fight_player <ai>)
      info:
        en: Causes a group of actors to preferentially target the player
        es: 
      ex: 

    - type: (ai_vehicle_encounter <unit> <ai>)
      info:
        en: >
          Sets a vehicle to "belong" to a particular encounter/squad. Any actors
          who get into the vehicle will be placed in this squad. Vehicles
          potentially drivable by multiple teams need their own encounter!
        es: 
      ex: 

    - type: (ai_vehicle_enterable_actor_type <unit> <actor_type>)
      info:
        en: >
          Sets a vehicle as being impulsively enterable for actors of a certain
          type (grunt, elite, marine etc)
        es: 
      ex: 

    - type: (ai_vehicle_enterable_actors <unit> <ai>)
      info:
        en: >
          Sets a vehicle as being impulsively enterable for a certain
          encounter/squad of actors
        es: 
      ex: 

    - type: (ai_vehicle_enterable_disable <unit>)
      info:
        en: >
          Disables actors from impulsively getting into a vehicle (this is the
          default state for newly placed vehicles)
        es: 
      ex: 

    - type: (ai_vehicle_enterable_distance <unit> <real>)
      info:
        en: >
          Sets a vehicle as being impulsively enterable for actors within a
          certain distance
        es: 
      ex: 

    - type: (ai_vehicle_enterable_team <unit> <team>)
      info:
        en: Sets a vehicle as being impulsively enterable for actors on a certain team
        es: 
      ex: 

    - type: (attract_mode_start)
      info:
        en: N/A in pc
        es: 
      ex: 

    - type: (bind <string> <string> <string>)
      info:
        en: Binds an input device/button combination to a game control
        es: 
      ex: 

    - type: (breakable_surfaces_enable <boolean>)
      info:
        en: Enables or disables breakability of all breakable surfaces on level
        es: 
      ex: '`(breakable_surfaces_enable false)`'

    - type: (breakable_surfaces_reset)
      info:
        en: Restores all breakable surfaces
        es: 
      ex: '`(breakable_surfaces_reset)`'

    - type: (camera_control <boolean>)
      info:
        en: Toggles script control of the camera
        es: 
      ex: '`(camera_control true)` <br/> `(camera_control false)`'

    - type: (camera_set <cutscene_camera_point> <short>)
      info:
        en: >
          Moves the camera to the specified camera point over the specified
          number of ticks
        es: 
      ex: '`(camera_set somewhere_point 100)`'

    - type: (camera_set_animation <animation_graph> <string>)
      info:
        en: Begins a prerecorded camera animation
        es: 
      ex: 

    - type: (camera_set_dead <unit>)
      info:
        en: Makes the scripted camera zoom out around a unit as if it were dead
        es: 
      ex: '`(camera_set_dead player0)`'

    - type: (camera_set_first_person <unit>)
      info:
        en: Makes the scripted camera follow a unit
        es: 
      ex: '`(camera_set_first_person player0)`'

    - type: (camera_set_relative <cutscene_camera_point> <short> <object>)
      info:
        en: >
          Moves the camera to the specified camera point over the specified
          number of ticks (position is relative to the specified object)
        es: 
      ex: '`(camera_set_relative somewhere_point 200 warthog_mp_1)`'

    - type: (camera_time)
      info:
        en: Returns the number of ticks remaining in the current camera interpolation
        es: 
      ex: '`(camera_time)`'

    - type: (change_team <short>)
      info:
        en: Change your team (0=red, 1=blue, else=auto)
        es: 
      ex: >
        `(change_team 0)`   returns: changes you to red <br/>
        `(change_team 1)`   returns: changes you to blue <br/>
        `(change_team  2)`  returns: auto balance

    - type: (cheat_active_camouflage)
      info:
        en: Gives the player active camouflage
        es: 
      ex: '`(cheat_active_camouflage)`'

    - type: (cheat_active_camouflage_local_player <short>)
      info:
        en: Gives the player active camouflage
        es: 
      ex: '`(cheat_active_camouflage_local_player 1)`'

    - type: (cheat_all_powerups)
      info:
        en: Drops all powerups near player
        es: 
      ex: '`(cheat_all_powerups)`'

    - type: (cheat_all_vehicles)
      info:
        en: Drops all vehicles on player
        es: 
      ex: '`(cheat_all_vehicles)`'

    - type: (cheat_all_weapons)
      info:
        en: Drops all weapons near player
        es: 
      ex: '`(cheat_all_weapons)`'

    - type: (cheat_spawn_warthog)
      info:
        en: Drops a warthog near player
        es: 
      ex: '`(cheat_spawn_warthog)`'

    - type: (cheat_teleport_to_camera)
      info:
        en: Teleports player to camera location
        es: 
      ex: '`(cheat_teleport_to_camera)`'

    - type: (cheats_load)
      info:
        en: Reloads the cheats.txt file
        es: 
      ex: '`(cheats_load)`'

    - type: (checkpoint_load <string>)
      info:
        en: Load a saved checkpoint
        es: 
      ex: 

    - type: (checkpoint_save)
      info:
        en: Save last solo checkpoint
        es: 
      ex: '`(checkpoint_save)`'

    - type: (cinematic_abort)
      info:
        en: Aborts a cinematic
        es: 
      ex: '`(cinematic_abort)`'

    - type: (cinematic_screen_effect_set_convolution <short> <short> <real> <real> <real>)
      info:
        en: Sets the convolution effect
        es: 
      ex: 

    - type: (cinematic_screen_effect_set_filter <real> <real> <real> <real> <boolean> <real>)
      info:
        en: Sets the filter effect
        es: 
      ex: 

    - type: (cinematic_screen_effect_set_filter_desaturation_tint <real> <real> <real>)
      info:
        en: Sets the desaturation filter tint color
        es: 
      ex: 

    - type: (cinematic_screen_effect_set_video <short> <real>)
      info:
        en: >
          Sets the video effect: `<noise intensity[0,1]>`,
          `<overbright: 0=none, 1=2x, 2=4x>`
        es: 
      ex: 

    - type: (cinematic_screen_effect_start <boolean>)
      info:
        en: Starts screen effect; pass true to clear
        es: 
      ex: 

    - type: (cinematic_screen_effect_stop)
      info:
        en: Returns control of the screen effects to the rest of the game
        es: 
      ex: 

    - type: (cinematic_set_near_clip_distance <real>)
      info:
        en: 
        es: 
      ex: 

    - type: (cinematic_set_title <cutscene_title>)
      info:
        en: Activates the chapter title
        es: 
      ex: 

    - type: (cinematic_set_title_delayed <cutscene_title> <real>)
      info:
        en: Activates the chapter title, delayed by <real> seconds
        es: 
      ex: 

    - type: (cinematic_show_letterbox <boolean>)
      info:
        en: Sets or removes the letterbox bars
        es: 
      ex: '`(cinematic_show_letterbox true)` <br/> `(cinematic_show_letterbox false)`'

    - type: (cinematic_skip_start_internal)
      info:
        en: 
        es: 
      ex: '`(cinematic_skip_start_internal)`'

    - type: (cinematic_skip_stop_internal)
      info:
        en: 
        es: 
      ex: '`(cinematic_skip_stop_internal)`'

    - type: (cinematic_start)
      info:
        en: Initializes game to start a cinematic (interruptive) cutscene
        es: 
      ex: '`(cinematic_start)`'

    - type: (cinematic_stop)
      info:
        en: Initializes the game to end a cinematic (interruptive) cutscene
        es: 
      ex: '`(cinematic_stop)`'

    - type: (cinematic_suppress_bsp_object_creation <boolean>)
      info:
        en: >
          Suppresses or enables the automatic creation of objects during
          cutscenes due to a bsp switch
        es: 
      ex: >
        `(cinematic_suppress_bsp_object_creation true)` <br/>
        `(cinematic_suppress_bsp_object_creation false)`

    - type: (config_one_control <string>)
      info:
        en: Test function to configure a single control
        es: 
      ex: 

    - type: (connect <string> <string>)
      info:
        en: 'Attempt to connect to server - use ip:port password as parameters'
        es: 
      ex: 

    - type: (crash <string>)
      info:
        en: Crashes (for debugging)
        es: 
      ex: '`(crash "Something is wrong")`'

    - type: (custom_animation <unit> <animation_graph> <string> <boolean>)
      info:
        en: >
          Starts a custom animation playing on a unit (interpolates into
          animation if last parameter is true)
        es: 
      ex: 

    - type: (custom_animation_list <object_list> <animation_graph> <string> <boolean>)
      info:
        en: >
          Starts a custom animation playing on a unit list (interpolates into
          animation if last parameter is true)
        es: 
      ex: 

    - type: (damage_new <damage> <cutscene_flag>)
      info:
        en: Causes the specified damage at the specified flag
        es: 
      ex: '`(damage_new "scenery\emitters\burning_flame\flame" enter_lava_flag)`'

    - type: (damage_object <damage> <object>)
      info:
        en: Causes the specified damage at the specified object
        es: 
      ex: '`(damage_object "weapons\assault rifle\bullet" player0)`'

    - type: (deactivate_nav_point_flag <unit> <cutscene_flag>)
      info:
        en: Deactivates a nav point type attached to a player <unit> anchored to a flag
        es: 
      ex: 

    - type: (deactivate_nav_point_object <unit> <object>)
      info:
        en: Deactivates a nav point type attached to a player <unit> anchored to an object
        es: 
      ex: 

    - type: (deactivate_team_nav_point_flag <team> <cutscene_flag>)
      info:
        en: Deactivates a nav point type attached to a team anchored to a flag
        es: 
      ex: 

    - type: (deactivate_team_nav_point_object <team> <object>)
      info:
        en: Deactivates a nav point type attached to a team anchored to an object
        es: 
      ex: 

    - type: (debug_camera_load)
      info:
        en: Loads the saved camera position and facing
        es: 
      ex: '`(debug_camera_load)`'

    - type: (debug_camera_save)
      info:
        en: Saves the camera position and facing
        es: 
      ex: '`(debug_camera_save)`'

    - type: (debug_memory)
      info:
        en: Dumps memory leaks
        es: 
      ex: '`(debug_memory)`'

    - type: (debug_memory_by_file)
      info:
        en: Dumps memory leaks by source file
        es: 
      ex: '`(debug_memory_by_file)`'

    - type: (debug_memory_for_file <string>)
      info:
        en: Dumps memory leaks from the specified source file
        es: 
      ex: '`(debug_memory_for_file "\halopc\haloce\source\tag_files\tag_groups.c")`'

    - type: (debug_teleport_player <short> <short>)
      info:
        en: 
        es: 
      ex: 

    - type: (debug_sounds_distances <string> <real> <real>)
      info:
        en: >
          Changes the minimum and maximum distances for all sound classes
          matching the substring
        es: 
      ex: 

    - type: (debug_sounds_enable <string> <boolean>)
      info:
        en: Enables or disabled all sound classes matching the substring
        es: 
      ex: 

    - type: (debug_sounds_wet <string> <real>)
      info:
        en: Changes the reverb level for all sound classes matching the substring
        es: 
      ex: 

    - type: (debug_tags)
      info:
        en: Writes all memory being used by tag files into tag_dump.txt
        es: 
      ex: '`(debug_tags)`'

    - type: (delete_save_game_files)
      info:
        en: Delete all custom profile files
        es: 
      ex: '`(delete_save_game_files)`'

    - type: (device_get_position <device>)
      info:
        en: >
          Gets the current position of the given device (used for devices
          without explicit device groups)
        es: 
      ex: 

    - type: (device_get_power <device>)
      info:
        en: Gets the current power of a named device
        es: 
      ex: 

    - type: (device_group_change_only_once_more_set <device_group> <boolean>)
      info:
        en: true allows a device to change states only once
        es: 
      ex: 

    - type: (device_group_get <device_group>)
      info:
        en: Returns the desired value of the specified device group
        es: 
      ex: 

    - type: (device_group_set <device_group> <real>)
      info:
        en: Changes the desired value of the specified device group
        es: 
      ex: 

    - type: (device_group_set_immediate <device_group> <real>)
      info:
        en: Instantaneously changes the value of the specified device group
        es: 
      ex: 

    - type: (device_one_sided_set <device> <boolean>)
      info:
        en: >
          true makes the given device one-sided (only able to be opened from one
          direction), false makes it two-sided
        es: 
      ex: 

    - type: (device_operates_automatically_set <device> <boolean>)
      info:
        en: >
          true makes the given device open automatically when any biped is
          nearby, false makes it not
        es: 
      ex: 

    - type: (device_get_position <device>)
      info:
        en: >
          Gets the current position of the given device (used for devices
          without explicit device groups)
        es: 
      ex: 

    - type: (device_set_position <device> <real>)
      info:
        en: >
          Set the desired position of the given device (used for devices without
          explicit device groups)
        es: 
      ex: '`(device_set_position <device> 1.0)`'

    - type: (device_set_position_immediate <device> <real>)
      info:
        en: >
          Instantaneously changes the position of the given device (used for
          devices without explicit device groups
        es: 
      ex: '`(device_set_position_immediate <device> 1.0)`'

    - type: (device_set_power <device> <real>)
      info:
        en: Immediately sets the power of a named device to the given value
        es: 
      ex: '`(device_set_power <device> 1.0)`'

    - type: (display_scenario_help <short>)
      info:
        en: Display in-game help dialog
        es: 
      ex: '`(display_scenario_help 1)`'

    - type: (effect_new <effect> <cutscene_flag>)
      info:
        en: Starts the specified effect at the specified flag
        es: 
      ex: '`(effect_new "effects\coop teleport" teleporting_flag)`'

    - type: (effect_new_on_object_marker <effect> <object> <string>)
      info:
        en: Starts the specified effect on the specified object at the specified marker
        es: 
      ex: '`(effect_new_on_object_marker "effects\burning large" warthog_mp "driver")`'

    - type: (enable_hud_help_flash <boolean>)
      info:
        en: Starts/stops the help text flashing
        es: 
      ex: '`(enable_hud_help_flash true)` <br/> `(enable_hud_help_flash false)`'

    - type: (error_overflow_suppression <boolean>)
      info:
        en: Enables or disables the suppression of error spamming
        es: 
      ex: '`(error_overflow_suppression true)` <br/> `(error_overflow_suppression false)`'

    - type: (fade_in <real> <real> <real> <short>)
      info:
        en: Does a screen fade in from a particular color in the amount of ticks
        es: 
      ex: '`(fade_in 0.0 0.0 0.0 100)`'

    - type: (fade_out <real> <real> <real> <short>)
      info:
        en: Does a screen fade out to a particular color in the amount of ticks
        es: 
      ex: '`(fade_out 1.0 1.0 1.0 100)`'

    - type: (fast_setup_network_server <string> <string> <boolean>)
      info:
        en: >
          Sets up a network server with the given map name, game variant, and
          true for remote connections, false for not
        es: 
      ex: 

    - type: (game_all_quiet)
      info:
        en: Returns false if there are bad guys around, projectiles in the air, etc.
        es: 
      ex: '`(game_all_quiet)`'

    - type: (game_difficulty_get)
      info:
        en: >
          Returns the current difficulty setting, but lies to you and will never
          return easy, instead returning normal
        es: 
      ex: '`(game_difficulty_get)`'

    - type: (game_difficulty_get_real)
      info:
        en: Returns the actual current difficulty setting without lying
        es: 
      ex: '`(game_difficulty_get_real)`'

    - type: (game_difficulty_set <game_difficulty>)
      info:
        en: Changes the difficulty setting for the next map to be loaded
        es: 
      ex: >
        `(game_difficulty_set easy)` <br/>
        `(game_difficulty_set normal)` <br/>
        `(game_difficulty_set hard)` <br/>
        `(game_difficulty_set impossible)`

    - type: (game_is_cooperative)
      info:
        en: Returns true if the game is cooperative
        es: 
      ex: '`(game_is_cooperative)`'

    - type: (game_lost)
      info:
        en: Causes the player to revert to his previous saved game
        es: 
      ex: '`(game_lost)`'

    - type: (game_revert)
      info:
        en: >
          Reverts to last saved game, if any (for testing, the first bastard
          that does this to me gets it in the head)
        es: 
      ex: '`(game_revert)`'

    - type: (game_reverted)
      info:
        en: Don't use this for anything, you black-hearted bastards
        es: 
      ex: '`(game_reverted)`'

    - type: (game_safe_to_save)
      info:
        en: Returns false if it would be a bad idea to save the player's game right now
        es: 
      ex: '`(game_safe_to_save)`'

    - type: (game_safe_to_speak)
      info:
        en: Returns false if it would be a bad idea to save the player's game right now
        es: 
      ex: '`(game_safe_to_speak)`'

    - type: (game_save)
      info:
        en: >
          Checks to see if it is safe to save game, then saves (gives up after
          8 seconds)
        es: 
      ex: '`(game_save)`'

    - type: (game_save_cancel)
      info:
        en: Cancels any pending game_save, timeout or not
        es: 
      ex: '`(game_save_cancel)`'

    - type: (game_save_no_timeout)
      info:
        en: >
          Checks to see if it is safe to save game, then saves (this version
          never gives up)
        es: 
      ex: '`(game_save_no_timeout)`'

    - type: (game_save_totally_unsafe)
      info:
        en: Saves disregarding player's current situation
        es: 
      ex: '`(game_save_totally_unsafe)`'

    - type: (game_saving)
      info:
        en: Checks to see if the game is trying to save the map
        es: 
      ex: '`(game_saving)`'

    - type: (game_skip_ticks <short>)
      info:
        en: Skips <short> amount of game ticks. ONLY USE IN CUTSCENES!!!
        es: 
      ex: '`(game_skip_ticks 5)`'

    - type: (game_speed <real>)
      info:
        en: Changes the game speed
        es: 
      ex: '`(game_speed 0.5)`'

    - type: (game_time)
      info:
        en: Gets ticks elapsed since the start of the game
        es: 
      ex: '`(game_time)`'

    - type: (game_won)
      info:
        en: >
          Causes the player to successfully finish the current level and move on
          to the next
        es: 
      ex: '`(game_won)`'

    - type: (garbage_collect_now)
      info:
        en: >
          Causes all garbage objects except those visible to a player to be
          collected immediately
        es: 
      ex: '`(garbage_collect_now)`'

    - type: (get_digital_forward_throttle <short>)
      info:
        en: Gets the amount of forward throttle applied by digital device stimuli
        es: 
      ex: 

    - type: (get_digital_strafe_throttle <short>)
      info:
        en: Gets the amount of strafe throttle applied by digital device stimuli
        es: 
      ex: 

    - type: (get_digital_yaw_increment <short>)
      info:
        en: Gets the increment in yaw applied by digital device stimuli
        es: 
      ex: 

    - type: (get_digital_pitch_increment <short>)
      info:
        en: Gets the increment in pitch applied by digital device stimuli
        es: 
      ex: 

    - type: (get_gamepad_forward_threshold <short>)
      info:
        en: Gets the threshold beyond which gamepad movement is full forward throttle
        es: 
      ex: 

    - type: (get_gamepad_strafe_threshold <short>)
      info:
        en: Gets the threshold beyond which gamepad movement is full strafe throttle
        es: 
      ex: 

    - type: (get_gamepad_yaw_scale <short>)
      info:
        en: Gets the scale for gamepad control of yaw
        es: 
      ex: 

    - type: (get_gamepad_pitch_scale <short>)
      info:
        en: Gets the scale for gamepad control of pitch
        es: 
      ex: 

    - type: (get_mouse_forward_threshold <short>)
      info:
        en: Gets the threshold beyond which mouse movement is full forward throttle
        es: 
      ex: 

    - type: (get_mouse_strafe_threshold <short>)
      info:
        en: Gets the threshold beyond which mouse movement is full strafe throttle
        es: 
      ex: 

    - type: (get_mouse_yaw_scale <short>)
      info:
        en: Gets the scale for mouse control of yaw
        es: 
      ex: 

    - type: (get_mouse_pitch_scale <short>)
      info:
        en: Gets the scale for mouse control of pitch
        es: 
      ex: 

    - type: (get_yaw_rate <short>)
      info:
        en: Gets the yaw rate for the given player number
        es: 
      ex: 

    - type: (get_pitch_rate <short>)
      info:
        en: Gets the yaw rate for the given player number
        es: 
      ex: 

    - type: (hammer_begin <string> <string> <long> <short> <short>)
      info:
        en: Hammers the server by connecting and disconnecting repeatedly
        es: 
      ex: 

    - type: (hammer_stop)
      info:
        en: Stops hammering the server
        es: 
      ex: '`(hammer_stop)`'

    - type: (help <string>)
      info:
        en: Prints a description of the named function
        es: 
      ex: '`(help cheats_load)`'

    - type: (hud_blink_health <boolean>)
      info:
        en: Starts/stops manual blinking of the health panel
        es: 
      ex: '`(hud_blink_health true)` <br/> `(hud_blink_health false)`'

    - type: (hud_blink_motion_sensor <boolean>)
      info:
        en: Starts/stops manual blinking of the motion sensor panel
        es: 
      ex: '`(hud_blink_motion_sensor true)` <br/> `(hud_blink_motion_sensor false)`'

    - type: (hud_blink_shield <boolean>)
      info:
        en: Starts/stops manual blinking of the shield panel
        es: 
      ex: '`(hud_blink_shield true)` <br/> `(hud_blink_shield false)`'

    - type: (hud_clear_messages)
      info:
        en: Clears all non-state messages on the hud
        es: 
      ex: '`(hud_clear_messages)`'

    - type: (hud_get_timer_ticks)
      info:
        en: Returns the ticks left on the hud timer
        es: 
      ex: '`(hud_get_timer_ticks)`'

    - type: (hud_help_flash_restart)
      info:
        en: Resets the timer for the help text flashing
        es: 
      ex: '`(hud_help_flash_restart)`'

    - type: (input_activate_joy <short> <short>)
      info:
        en: Activates an enumerated joystick into a logical joystick slot
        es: 
      ex: 

    - type: (input_deactivate_joy <short>)
      info:
        en: Deactivates an enumerated joystick, freeing up the logical joystick slot
        es: 
      ex: 

    - type: (input_find_default <string>)
      info:
        en: Test function that looks up a default profile for a deviceid
        es: 
      ex: 

    - type: (input_find_joystick <string>)
      info:
        en: Test function to find a joystick by GUID (string representation)
        es: 
      ex: 

    - type: (input_get_joy_count)
      info:
        en: Test function to return the number of joysticks enumerated
        es: 
      ex: '`(input_get_joy_count)`'

    - type: (input_is_joy_active <short>)
      info:
        en: Test function to determine if an enumerated joystick is activated or not
        es: 
      ex: 

    - type: (input_show_joystick_info)
      info:
        en: Test function to show the enumerated joystick information for all joystick
        es: 
      ex: '`(input_show_joystick_info)`'

    - type: (list_count <object_list>)
      info:
        en: Returns the number of objects in a list
        es: 
      ex: '`(list_count the_warthogs)`'

    - type: (list_get <object_list> <short>)
      info:
        en: Returns an item in an object list
        es: 
      ex: '`(list_get the_warthogs 3)`'

